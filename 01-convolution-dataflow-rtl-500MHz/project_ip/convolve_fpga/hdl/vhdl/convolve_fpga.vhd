-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_fpga is
generic (
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3 );
port (
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    inFrame : IN STD_LOGIC_VECTOR (63 downto 0);
    outFrame : IN STD_LOGIC_VECTOR (63 downto 0);
    coefficient : IN STD_LOGIC_VECTOR (63 downto 0);
    coefficient_size : IN STD_LOGIC_VECTOR (31 downto 0);
    img_width : IN STD_LOGIC_VECTOR (31 downto 0);
    img_height : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of convolve_fpga is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "convolve_fpga_convolve_fpga,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcu200-fsgd2104-2-e,HLS_INPUT_CLOCK=2.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=1.460000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=18,HLS_SYN_DSP=0,HLS_SYN_FF=6178,HLS_SYN_LUT=6410,HLS_VERSION=2020_1}";
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_rst_n_inv : STD_LOGIC;
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split1_proc9_U0_ap_start : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_done : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_continue : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_idle : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_ready : STD_LOGIC;
    signal Block_split1_proc9_U0_start_out : STD_LOGIC;
    signal Block_split1_proc9_U0_start_write : STD_LOGIC;
    signal Block_split1_proc9_U0_img_width_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split1_proc9_U0_img_width_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_elements_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split1_proc9_U0_elements_out_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_inFrame_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_inFrame_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_outFrame_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_outFrame_out_write : STD_LOGIC;
    signal Block_split1_proc9_U0_coefficient_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split1_proc9_U0_coefficient_out_write : STD_LOGIC;
    signal read_dataflow_1_U0_ap_start : STD_LOGIC;
    signal read_dataflow_1_U0_ap_done : STD_LOGIC;
    signal read_dataflow_1_U0_ap_continue : STD_LOGIC;
    signal read_dataflow_1_U0_ap_idle : STD_LOGIC;
    signal read_dataflow_1_U0_ap_ready : STD_LOGIC;
    signal read_dataflow_1_U0_read_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_dataflow_1_U0_read_stream_write : STD_LOGIC;
    signal read_dataflow_1_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal read_dataflow_1_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal read_dataflow_1_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal read_dataflow_1_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal read_dataflow_1_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_dataflow_1_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal read_dataflow_1_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal read_dataflow_1_U0_inFrame_read : STD_LOGIC;
    signal read_dataflow_1_U0_img_width_read : STD_LOGIC;
    signal read_dataflow_1_U0_elements_loc_read : STD_LOGIC;
    signal read_dataflow_1_U0_img_width_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_dataflow_1_U0_img_width_out_write : STD_LOGIC;
    signal read_dataflow_1_U0_elements_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_dataflow_1_U0_elements_loc_out_write : STD_LOGIC;
    signal compute_dataflow_1_U0_ap_start : STD_LOGIC;
    signal compute_dataflow_1_U0_ap_done : STD_LOGIC;
    signal compute_dataflow_1_U0_ap_continue : STD_LOGIC;
    signal compute_dataflow_1_U0_ap_idle : STD_LOGIC;
    signal compute_dataflow_1_U0_ap_ready : STD_LOGIC;
    signal compute_dataflow_1_U0_write_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_dataflow_1_U0_write_stream_write : STD_LOGIC;
    signal compute_dataflow_1_U0_read_stream_read : STD_LOGIC;
    signal compute_dataflow_1_U0_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal compute_dataflow_1_U0_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_WVALID : STD_LOGIC;
    signal compute_dataflow_1_U0_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_WLAST : STD_LOGIC;
    signal compute_dataflow_1_U0_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal compute_dataflow_1_U0_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal compute_dataflow_1_U0_m_axi_gmem3_RREADY : STD_LOGIC;
    signal compute_dataflow_1_U0_m_axi_gmem3_BREADY : STD_LOGIC;
    signal compute_dataflow_1_U0_coefficient_read : STD_LOGIC;
    signal compute_dataflow_1_U0_img_width_read : STD_LOGIC;
    signal compute_dataflow_1_U0_elements_loc_read : STD_LOGIC;
    signal compute_dataflow_1_U0_elements_loc_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal compute_dataflow_1_U0_elements_loc_out_write : STD_LOGIC;
    signal write_dataflow_1_U0_ap_start : STD_LOGIC;
    signal write_dataflow_1_U0_ap_done : STD_LOGIC;
    signal write_dataflow_1_U0_ap_continue : STD_LOGIC;
    signal write_dataflow_1_U0_ap_idle : STD_LOGIC;
    signal write_dataflow_1_U0_ap_ready : STD_LOGIC;
    signal write_dataflow_1_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal write_dataflow_1_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal write_dataflow_1_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal write_dataflow_1_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal write_dataflow_1_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_dataflow_1_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal write_dataflow_1_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal write_dataflow_1_U0_write_stream_read : STD_LOGIC;
    signal write_dataflow_1_U0_outFrame_read : STD_LOGIC;
    signal write_dataflow_1_U0_elements_loc_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal img_width_c_full_n : STD_LOGIC;
    signal img_width_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_width_c_empty_n : STD_LOGIC;
    signal elements_loc_c_full_n : STD_LOGIC;
    signal elements_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal elements_loc_c_empty_n : STD_LOGIC;
    signal inFrame_c_full_n : STD_LOGIC;
    signal inFrame_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal inFrame_c_empty_n : STD_LOGIC;
    signal outFrame_c_full_n : STD_LOGIC;
    signal outFrame_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal outFrame_c_empty_n : STD_LOGIC;
    signal coefficient_c_full_n : STD_LOGIC;
    signal coefficient_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal coefficient_c_empty_n : STD_LOGIC;
    signal read_stream_full_n : STD_LOGIC;
    signal read_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal read_stream_empty_n : STD_LOGIC;
    signal img_width_c9_full_n : STD_LOGIC;
    signal img_width_c9_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal img_width_c9_empty_n : STD_LOGIC;
    signal elements_loc_c10_full_n : STD_LOGIC;
    signal elements_loc_c10_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal elements_loc_c10_empty_n : STD_LOGIC;
    signal write_stream_full_n : STD_LOGIC;
    signal write_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal write_stream_empty_n : STD_LOGIC;
    signal elements_loc_c11_full_n : STD_LOGIC;
    signal elements_loc_c11_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal elements_loc_c11_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_split1_proc9_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_split1_proc9_U0_ap_ready : STD_LOGIC;
    signal Block_split1_proc9_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_read_dataflow_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_dataflow_1_U0_ap_ready : STD_LOGIC;
    signal read_dataflow_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_compute_dataflow_1_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_compute_dataflow_1_U0_ap_ready : STD_LOGIC;
    signal compute_dataflow_1_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_write_dataflow_1_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_dataflow_1_U0_full_n : STD_LOGIC;
    signal start_for_write_dataflow_1_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_write_dataflow_1_U0_empty_n : STD_LOGIC;
    signal read_dataflow_1_U0_start_full_n : STD_LOGIC;
    signal read_dataflow_1_U0_start_write : STD_LOGIC;
    signal compute_dataflow_1_U0_start_full_n : STD_LOGIC;
    signal compute_dataflow_1_U0_start_write : STD_LOGIC;
    signal write_dataflow_1_U0_start_full_n : STD_LOGIC;
    signal write_dataflow_1_U0_start_write : STD_LOGIC;

    component convolve_fpga_Block_split1_proc9 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        img_width : IN STD_LOGIC_VECTOR (31 downto 0);
        img_height : IN STD_LOGIC_VECTOR (31 downto 0);
        inFrame : IN STD_LOGIC_VECTOR (63 downto 0);
        outFrame : IN STD_LOGIC_VECTOR (63 downto 0);
        coefficient : IN STD_LOGIC_VECTOR (63 downto 0);
        img_width_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_width_out_full_n : IN STD_LOGIC;
        img_width_out_write : OUT STD_LOGIC;
        elements_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        elements_out_out_full_n : IN STD_LOGIC;
        elements_out_out_write : OUT STD_LOGIC;
        inFrame_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        inFrame_out_full_n : IN STD_LOGIC;
        inFrame_out_write : OUT STD_LOGIC;
        outFrame_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outFrame_out_full_n : IN STD_LOGIC;
        outFrame_out_write : OUT STD_LOGIC;
        coefficient_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        coefficient_out_full_n : IN STD_LOGIC;
        coefficient_out_write : OUT STD_LOGIC );
    end component;


    component convolve_fpga_read_dataflow_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        read_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        read_stream_full_n : IN STD_LOGIC;
        read_stream_write : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        inFrame_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        inFrame_empty_n : IN STD_LOGIC;
        inFrame_read : OUT STD_LOGIC;
        img_width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_width_empty_n : IN STD_LOGIC;
        img_width_read : OUT STD_LOGIC;
        elements_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        elements_loc_empty_n : IN STD_LOGIC;
        elements_loc_read : OUT STD_LOGIC;
        img_width_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        img_width_out_full_n : IN STD_LOGIC;
        img_width_out_write : OUT STD_LOGIC;
        elements_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        elements_loc_out_full_n : IN STD_LOGIC;
        elements_loc_out_write : OUT STD_LOGIC );
    end component;


    component convolve_fpga_compute_dataflow_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        write_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        write_stream_full_n : IN STD_LOGIC;
        write_stream_write : OUT STD_LOGIC;
        read_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        read_stream_empty_n : IN STD_LOGIC;
        read_stream_read : OUT STD_LOGIC;
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        coefficient_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        coefficient_empty_n : IN STD_LOGIC;
        coefficient_read : OUT STD_LOGIC;
        img_width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        img_width_empty_n : IN STD_LOGIC;
        img_width_read : OUT STD_LOGIC;
        elements_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        elements_loc_empty_n : IN STD_LOGIC;
        elements_loc_read : OUT STD_LOGIC;
        elements_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        elements_loc_out_full_n : IN STD_LOGIC;
        elements_loc_out_write : OUT STD_LOGIC );
    end component;


    component convolve_fpga_write_dataflow_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        write_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        write_stream_empty_n : IN STD_LOGIC;
        write_stream_read : OUT STD_LOGIC;
        outFrame_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        outFrame_empty_n : IN STD_LOGIC;
        outFrame_read : OUT STD_LOGIC;
        elements_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        elements_loc_empty_n : IN STD_LOGIC;
        elements_loc_read : OUT STD_LOGIC );
    end component;


    component convolve_fpga_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component convolve_fpga_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component convolve_fpga_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component convolve_fpga_fifo_w64_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component convolve_fpga_start_for_write_dataflow_1_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component convolve_fpga_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolve_fpga_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component convolve_fpga_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    gmem1_m_axi_U : component convolve_fpga_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_dataflow_1_U0_m_axi_gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => read_dataflow_1_U0_m_axi_gmem1_ARADDR,
        I_ARID => read_dataflow_1_U0_m_axi_gmem1_ARID,
        I_ARLEN => read_dataflow_1_U0_m_axi_gmem1_ARLEN,
        I_ARSIZE => read_dataflow_1_U0_m_axi_gmem1_ARSIZE,
        I_ARLOCK => read_dataflow_1_U0_m_axi_gmem1_ARLOCK,
        I_ARCACHE => read_dataflow_1_U0_m_axi_gmem1_ARCACHE,
        I_ARQOS => read_dataflow_1_U0_m_axi_gmem1_ARQOS,
        I_ARPROT => read_dataflow_1_U0_m_axi_gmem1_ARPROT,
        I_ARUSER => read_dataflow_1_U0_m_axi_gmem1_ARUSER,
        I_ARBURST => read_dataflow_1_U0_m_axi_gmem1_ARBURST,
        I_ARREGION => read_dataflow_1_U0_m_axi_gmem1_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => read_dataflow_1_U0_m_axi_gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    gmem2_m_axi_U : component convolve_fpga_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => write_dataflow_1_U0_m_axi_gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => write_dataflow_1_U0_m_axi_gmem2_AWADDR,
        I_AWID => write_dataflow_1_U0_m_axi_gmem2_AWID,
        I_AWLEN => write_dataflow_1_U0_m_axi_gmem2_AWLEN,
        I_AWSIZE => write_dataflow_1_U0_m_axi_gmem2_AWSIZE,
        I_AWLOCK => write_dataflow_1_U0_m_axi_gmem2_AWLOCK,
        I_AWCACHE => write_dataflow_1_U0_m_axi_gmem2_AWCACHE,
        I_AWQOS => write_dataflow_1_U0_m_axi_gmem2_AWQOS,
        I_AWPROT => write_dataflow_1_U0_m_axi_gmem2_AWPROT,
        I_AWUSER => write_dataflow_1_U0_m_axi_gmem2_AWUSER,
        I_AWBURST => write_dataflow_1_U0_m_axi_gmem2_AWBURST,
        I_AWREGION => write_dataflow_1_U0_m_axi_gmem2_AWREGION,
        I_WVALID => write_dataflow_1_U0_m_axi_gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => write_dataflow_1_U0_m_axi_gmem2_WDATA,
        I_WID => write_dataflow_1_U0_m_axi_gmem2_WID,
        I_WUSER => write_dataflow_1_U0_m_axi_gmem2_WUSER,
        I_WLAST => write_dataflow_1_U0_m_axi_gmem2_WLAST,
        I_WSTRB => write_dataflow_1_U0_m_axi_gmem2_WSTRB,
        I_BVALID => gmem2_BVALID,
        I_BREADY => write_dataflow_1_U0_m_axi_gmem2_BREADY,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    gmem3_m_axi_U : component convolve_fpga_gmem3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => compute_dataflow_1_U0_m_axi_gmem3_ARVALID,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => compute_dataflow_1_U0_m_axi_gmem3_ARADDR,
        I_ARID => compute_dataflow_1_U0_m_axi_gmem3_ARID,
        I_ARLEN => compute_dataflow_1_U0_m_axi_gmem3_ARLEN,
        I_ARSIZE => compute_dataflow_1_U0_m_axi_gmem3_ARSIZE,
        I_ARLOCK => compute_dataflow_1_U0_m_axi_gmem3_ARLOCK,
        I_ARCACHE => compute_dataflow_1_U0_m_axi_gmem3_ARCACHE,
        I_ARQOS => compute_dataflow_1_U0_m_axi_gmem3_ARQOS,
        I_ARPROT => compute_dataflow_1_U0_m_axi_gmem3_ARPROT,
        I_ARUSER => compute_dataflow_1_U0_m_axi_gmem3_ARUSER,
        I_ARBURST => compute_dataflow_1_U0_m_axi_gmem3_ARBURST,
        I_ARREGION => compute_dataflow_1_U0_m_axi_gmem3_ARREGION,
        I_RVALID => gmem3_RVALID,
        I_RREADY => compute_dataflow_1_U0_m_axi_gmem3_RREADY,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem3_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    Block_split1_proc9_U0 : component convolve_fpga_Block_split1_proc9
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split1_proc9_U0_ap_start,
        start_full_n => start_for_write_dataflow_1_U0_full_n,
        ap_done => Block_split1_proc9_U0_ap_done,
        ap_continue => Block_split1_proc9_U0_ap_continue,
        ap_idle => Block_split1_proc9_U0_ap_idle,
        ap_ready => Block_split1_proc9_U0_ap_ready,
        start_out => Block_split1_proc9_U0_start_out,
        start_write => Block_split1_proc9_U0_start_write,
        img_width => img_width,
        img_height => img_height,
        inFrame => inFrame,
        outFrame => outFrame,
        coefficient => coefficient,
        img_width_out_din => Block_split1_proc9_U0_img_width_out_din,
        img_width_out_full_n => img_width_c_full_n,
        img_width_out_write => Block_split1_proc9_U0_img_width_out_write,
        elements_out_out_din => Block_split1_proc9_U0_elements_out_out_din,
        elements_out_out_full_n => elements_loc_c_full_n,
        elements_out_out_write => Block_split1_proc9_U0_elements_out_out_write,
        inFrame_out_din => Block_split1_proc9_U0_inFrame_out_din,
        inFrame_out_full_n => inFrame_c_full_n,
        inFrame_out_write => Block_split1_proc9_U0_inFrame_out_write,
        outFrame_out_din => Block_split1_proc9_U0_outFrame_out_din,
        outFrame_out_full_n => outFrame_c_full_n,
        outFrame_out_write => Block_split1_proc9_U0_outFrame_out_write,
        coefficient_out_din => Block_split1_proc9_U0_coefficient_out_din,
        coefficient_out_full_n => coefficient_c_full_n,
        coefficient_out_write => Block_split1_proc9_U0_coefficient_out_write);

    read_dataflow_1_U0 : component convolve_fpga_read_dataflow_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_dataflow_1_U0_ap_start,
        ap_done => read_dataflow_1_U0_ap_done,
        ap_continue => read_dataflow_1_U0_ap_continue,
        ap_idle => read_dataflow_1_U0_ap_idle,
        ap_ready => read_dataflow_1_U0_ap_ready,
        read_stream_din => read_dataflow_1_U0_read_stream_din,
        read_stream_full_n => read_stream_full_n,
        read_stream_write => read_dataflow_1_U0_read_stream_write,
        m_axi_gmem1_AWVALID => read_dataflow_1_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => read_dataflow_1_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => read_dataflow_1_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => read_dataflow_1_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => read_dataflow_1_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => read_dataflow_1_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => read_dataflow_1_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => read_dataflow_1_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => read_dataflow_1_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => read_dataflow_1_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => read_dataflow_1_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => read_dataflow_1_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => read_dataflow_1_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => read_dataflow_1_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => read_dataflow_1_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => read_dataflow_1_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => read_dataflow_1_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => read_dataflow_1_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => read_dataflow_1_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => read_dataflow_1_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => read_dataflow_1_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => read_dataflow_1_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => read_dataflow_1_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => read_dataflow_1_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => read_dataflow_1_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => read_dataflow_1_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => read_dataflow_1_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => read_dataflow_1_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => read_dataflow_1_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => read_dataflow_1_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => read_dataflow_1_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => read_dataflow_1_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        inFrame_dout => inFrame_c_dout,
        inFrame_empty_n => inFrame_c_empty_n,
        inFrame_read => read_dataflow_1_U0_inFrame_read,
        img_width_dout => img_width_c_dout,
        img_width_empty_n => img_width_c_empty_n,
        img_width_read => read_dataflow_1_U0_img_width_read,
        elements_loc_dout => elements_loc_c_dout,
        elements_loc_empty_n => elements_loc_c_empty_n,
        elements_loc_read => read_dataflow_1_U0_elements_loc_read,
        img_width_out_din => read_dataflow_1_U0_img_width_out_din,
        img_width_out_full_n => img_width_c9_full_n,
        img_width_out_write => read_dataflow_1_U0_img_width_out_write,
        elements_loc_out_din => read_dataflow_1_U0_elements_loc_out_din,
        elements_loc_out_full_n => elements_loc_c10_full_n,
        elements_loc_out_write => read_dataflow_1_U0_elements_loc_out_write);

    compute_dataflow_1_U0 : component convolve_fpga_compute_dataflow_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => compute_dataflow_1_U0_ap_start,
        ap_done => compute_dataflow_1_U0_ap_done,
        ap_continue => compute_dataflow_1_U0_ap_continue,
        ap_idle => compute_dataflow_1_U0_ap_idle,
        ap_ready => compute_dataflow_1_U0_ap_ready,
        write_stream_din => compute_dataflow_1_U0_write_stream_din,
        write_stream_full_n => write_stream_full_n,
        write_stream_write => compute_dataflow_1_U0_write_stream_write,
        read_stream_dout => read_stream_dout,
        read_stream_empty_n => read_stream_empty_n,
        read_stream_read => compute_dataflow_1_U0_read_stream_read,
        m_axi_gmem3_AWVALID => compute_dataflow_1_U0_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => ap_const_logic_0,
        m_axi_gmem3_AWADDR => compute_dataflow_1_U0_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => compute_dataflow_1_U0_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => compute_dataflow_1_U0_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => compute_dataflow_1_U0_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => compute_dataflow_1_U0_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => compute_dataflow_1_U0_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => compute_dataflow_1_U0_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => compute_dataflow_1_U0_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => compute_dataflow_1_U0_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => compute_dataflow_1_U0_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => compute_dataflow_1_U0_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => compute_dataflow_1_U0_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => ap_const_logic_0,
        m_axi_gmem3_WDATA => compute_dataflow_1_U0_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => compute_dataflow_1_U0_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => compute_dataflow_1_U0_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => compute_dataflow_1_U0_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => compute_dataflow_1_U0_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => compute_dataflow_1_U0_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => gmem3_ARREADY,
        m_axi_gmem3_ARADDR => compute_dataflow_1_U0_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => compute_dataflow_1_U0_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => compute_dataflow_1_U0_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => compute_dataflow_1_U0_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => compute_dataflow_1_U0_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => compute_dataflow_1_U0_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => compute_dataflow_1_U0_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => compute_dataflow_1_U0_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => compute_dataflow_1_U0_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => compute_dataflow_1_U0_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => compute_dataflow_1_U0_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => gmem3_RVALID,
        m_axi_gmem3_RREADY => compute_dataflow_1_U0_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => gmem3_RDATA,
        m_axi_gmem3_RLAST => gmem3_RLAST,
        m_axi_gmem3_RID => gmem3_RID,
        m_axi_gmem3_RUSER => gmem3_RUSER,
        m_axi_gmem3_RRESP => gmem3_RRESP,
        m_axi_gmem3_BVALID => ap_const_logic_0,
        m_axi_gmem3_BREADY => compute_dataflow_1_U0_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => ap_const_lv2_0,
        m_axi_gmem3_BID => ap_const_lv1_0,
        m_axi_gmem3_BUSER => ap_const_lv1_0,
        coefficient_dout => coefficient_c_dout,
        coefficient_empty_n => coefficient_c_empty_n,
        coefficient_read => compute_dataflow_1_U0_coefficient_read,
        img_width_dout => img_width_c9_dout,
        img_width_empty_n => img_width_c9_empty_n,
        img_width_read => compute_dataflow_1_U0_img_width_read,
        elements_loc_dout => elements_loc_c10_dout,
        elements_loc_empty_n => elements_loc_c10_empty_n,
        elements_loc_read => compute_dataflow_1_U0_elements_loc_read,
        elements_loc_out_din => compute_dataflow_1_U0_elements_loc_out_din,
        elements_loc_out_full_n => elements_loc_c11_full_n,
        elements_loc_out_write => compute_dataflow_1_U0_elements_loc_out_write);

    write_dataflow_1_U0 : component convolve_fpga_write_dataflow_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_dataflow_1_U0_ap_start,
        ap_done => write_dataflow_1_U0_ap_done,
        ap_continue => write_dataflow_1_U0_ap_continue,
        ap_idle => write_dataflow_1_U0_ap_idle,
        ap_ready => write_dataflow_1_U0_ap_ready,
        m_axi_gmem2_AWVALID => write_dataflow_1_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => gmem2_AWREADY,
        m_axi_gmem2_AWADDR => write_dataflow_1_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => write_dataflow_1_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => write_dataflow_1_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => write_dataflow_1_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => write_dataflow_1_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => write_dataflow_1_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => write_dataflow_1_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => write_dataflow_1_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => write_dataflow_1_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => write_dataflow_1_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => write_dataflow_1_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => write_dataflow_1_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => gmem2_WREADY,
        m_axi_gmem2_WDATA => write_dataflow_1_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => write_dataflow_1_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => write_dataflow_1_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => write_dataflow_1_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => write_dataflow_1_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => write_dataflow_1_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => ap_const_logic_0,
        m_axi_gmem2_ARADDR => write_dataflow_1_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => write_dataflow_1_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => write_dataflow_1_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => write_dataflow_1_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => write_dataflow_1_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => write_dataflow_1_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => write_dataflow_1_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => write_dataflow_1_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => write_dataflow_1_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => write_dataflow_1_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => write_dataflow_1_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => ap_const_logic_0,
        m_axi_gmem2_RREADY => write_dataflow_1_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => ap_const_lv32_0,
        m_axi_gmem2_RLAST => ap_const_logic_0,
        m_axi_gmem2_RID => ap_const_lv1_0,
        m_axi_gmem2_RUSER => ap_const_lv1_0,
        m_axi_gmem2_RRESP => ap_const_lv2_0,
        m_axi_gmem2_BVALID => gmem2_BVALID,
        m_axi_gmem2_BREADY => write_dataflow_1_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => gmem2_BRESP,
        m_axi_gmem2_BID => gmem2_BID,
        m_axi_gmem2_BUSER => gmem2_BUSER,
        write_stream_dout => write_stream_dout,
        write_stream_empty_n => write_stream_empty_n,
        write_stream_read => write_dataflow_1_U0_write_stream_read,
        outFrame_dout => outFrame_c_dout,
        outFrame_empty_n => outFrame_c_empty_n,
        outFrame_read => write_dataflow_1_U0_outFrame_read,
        elements_loc_dout => elements_loc_c11_dout,
        elements_loc_empty_n => elements_loc_c11_empty_n,
        elements_loc_read => write_dataflow_1_U0_elements_loc_read);

    img_width_c_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_img_width_out_din,
        if_full_n => img_width_c_full_n,
        if_write => Block_split1_proc9_U0_img_width_out_write,
        if_dout => img_width_c_dout,
        if_empty_n => img_width_c_empty_n,
        if_read => read_dataflow_1_U0_img_width_read);

    elements_loc_c_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_elements_out_out_din,
        if_full_n => elements_loc_c_full_n,
        if_write => Block_split1_proc9_U0_elements_out_out_write,
        if_dout => elements_loc_c_dout,
        if_empty_n => elements_loc_c_empty_n,
        if_read => read_dataflow_1_U0_elements_loc_read);

    inFrame_c_U : component convolve_fpga_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_inFrame_out_din,
        if_full_n => inFrame_c_full_n,
        if_write => Block_split1_proc9_U0_inFrame_out_write,
        if_dout => inFrame_c_dout,
        if_empty_n => inFrame_c_empty_n,
        if_read => read_dataflow_1_U0_inFrame_read);

    outFrame_c_U : component convolve_fpga_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_outFrame_out_din,
        if_full_n => outFrame_c_full_n,
        if_write => Block_split1_proc9_U0_outFrame_out_write,
        if_dout => outFrame_c_dout,
        if_empty_n => outFrame_c_empty_n,
        if_read => write_dataflow_1_U0_outFrame_read);

    coefficient_c_U : component convolve_fpga_fifo_w64_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split1_proc9_U0_coefficient_out_din,
        if_full_n => coefficient_c_full_n,
        if_write => Block_split1_proc9_U0_coefficient_out_write,
        if_dout => coefficient_c_dout,
        if_empty_n => coefficient_c_empty_n,
        if_read => compute_dataflow_1_U0_coefficient_read);

    read_stream_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_dataflow_1_U0_read_stream_din,
        if_full_n => read_stream_full_n,
        if_write => read_dataflow_1_U0_read_stream_write,
        if_dout => read_stream_dout,
        if_empty_n => read_stream_empty_n,
        if_read => compute_dataflow_1_U0_read_stream_read);

    img_width_c9_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_dataflow_1_U0_img_width_out_din,
        if_full_n => img_width_c9_full_n,
        if_write => read_dataflow_1_U0_img_width_out_write,
        if_dout => img_width_c9_dout,
        if_empty_n => img_width_c9_empty_n,
        if_read => compute_dataflow_1_U0_img_width_read);

    elements_loc_c10_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_dataflow_1_U0_elements_loc_out_din,
        if_full_n => elements_loc_c10_full_n,
        if_write => read_dataflow_1_U0_elements_loc_out_write,
        if_dout => elements_loc_c10_dout,
        if_empty_n => elements_loc_c10_empty_n,
        if_read => compute_dataflow_1_U0_elements_loc_read);

    write_stream_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_dataflow_1_U0_write_stream_din,
        if_full_n => write_stream_full_n,
        if_write => compute_dataflow_1_U0_write_stream_write,
        if_dout => write_stream_dout,
        if_empty_n => write_stream_empty_n,
        if_read => write_dataflow_1_U0_write_stream_read);

    elements_loc_c11_U : component convolve_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => compute_dataflow_1_U0_elements_loc_out_din,
        if_full_n => elements_loc_c11_full_n,
        if_write => compute_dataflow_1_U0_elements_loc_out_write,
        if_dout => elements_loc_c11_dout,
        if_empty_n => elements_loc_c11_empty_n,
        if_read => write_dataflow_1_U0_elements_loc_read);

    start_for_write_dataflow_1_U0_U : component convolve_fpga_start_for_write_dataflow_1_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_write_dataflow_1_U0_din,
        if_full_n => start_for_write_dataflow_1_U0_full_n,
        if_write => Block_split1_proc9_U0_start_write,
        if_dout => start_for_write_dataflow_1_U0_dout,
        if_empty_n => start_for_write_dataflow_1_U0_empty_n,
        if_read => write_dataflow_1_U0_ap_ready);





    ap_sync_reg_Block_split1_proc9_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_split1_proc9_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_split1_proc9_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_split1_proc9_U0_ap_ready <= ap_sync_Block_split1_proc9_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_compute_dataflow_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_compute_dataflow_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_compute_dataflow_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_compute_dataflow_1_U0_ap_ready <= ap_sync_compute_dataflow_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_dataflow_1_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_dataflow_1_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_dataflow_1_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_dataflow_1_U0_ap_ready <= ap_sync_read_dataflow_1_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    Block_split1_proc9_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Block_split1_proc9_U0_ap_ready))) then 
                Block_split1_proc9_U0_ap_ready_count <= std_logic_vector(unsigned(Block_split1_proc9_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (ap_const_logic_1 = Block_split1_proc9_U0_ap_ready))) then 
                Block_split1_proc9_U0_ap_ready_count <= std_logic_vector(unsigned(Block_split1_proc9_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    compute_dataflow_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (compute_dataflow_1_U0_ap_ready = ap_const_logic_0))) then 
                compute_dataflow_1_U0_ap_ready_count <= std_logic_vector(unsigned(compute_dataflow_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (compute_dataflow_1_U0_ap_ready = ap_const_logic_1))) then 
                compute_dataflow_1_U0_ap_ready_count <= std_logic_vector(unsigned(compute_dataflow_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    read_dataflow_1_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (read_dataflow_1_U0_ap_ready = ap_const_logic_0))) then 
                read_dataflow_1_U0_ap_ready_count <= std_logic_vector(unsigned(read_dataflow_1_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (read_dataflow_1_U0_ap_ready = ap_const_logic_1))) then 
                read_dataflow_1_U0_ap_ready_count <= std_logic_vector(unsigned(read_dataflow_1_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_split1_proc9_U0_ap_continue <= ap_const_logic_1;
    Block_split1_proc9_U0_ap_start <= ((ap_sync_reg_Block_split1_proc9_U0_ap_ready xor ap_const_logic_1) and ap_start);
    ap_done <= write_dataflow_1_U0_ap_done;
    ap_idle <= (write_dataflow_1_U0_ap_idle and read_dataflow_1_U0_ap_idle and compute_dataflow_1_U0_ap_idle and Block_split1_proc9_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_split1_proc9_U0_ap_ready <= (ap_sync_reg_Block_split1_proc9_U0_ap_ready or Block_split1_proc9_U0_ap_ready);
    ap_sync_compute_dataflow_1_U0_ap_ready <= (compute_dataflow_1_U0_ap_ready or ap_sync_reg_compute_dataflow_1_U0_ap_ready);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= write_dataflow_1_U0_ap_done;
    ap_sync_read_dataflow_1_U0_ap_ready <= (read_dataflow_1_U0_ap_ready or ap_sync_reg_read_dataflow_1_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_dataflow_1_U0_ap_ready and ap_sync_compute_dataflow_1_U0_ap_ready and ap_sync_Block_split1_proc9_U0_ap_ready);
    compute_dataflow_1_U0_ap_continue <= ap_const_logic_1;
    compute_dataflow_1_U0_ap_start <= ((ap_sync_reg_compute_dataflow_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    compute_dataflow_1_U0_start_full_n <= ap_const_logic_1;
    compute_dataflow_1_U0_start_write <= ap_const_logic_0;
    read_dataflow_1_U0_ap_continue <= ap_const_logic_1;
    read_dataflow_1_U0_ap_start <= ((ap_sync_reg_read_dataflow_1_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_dataflow_1_U0_start_full_n <= ap_const_logic_1;
    read_dataflow_1_U0_start_write <= ap_const_logic_0;
    start_for_write_dataflow_1_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_dataflow_1_U0_ap_continue <= ap_const_logic_1;
    write_dataflow_1_U0_ap_start <= start_for_write_dataflow_1_U0_empty_n;
    write_dataflow_1_U0_start_full_n <= ap_const_logic_1;
    write_dataflow_1_U0_start_write <= ap_const_logic_0;
end behav;
