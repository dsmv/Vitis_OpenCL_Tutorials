-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolve_fpga_compute_dataflow_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    write_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    write_stream_full_n : IN STD_LOGIC;
    write_stream_write : OUT STD_LOGIC;
    read_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    read_stream_empty_n : IN STD_LOGIC;
    read_stream_read : OUT STD_LOGIC;
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    coefficient_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    coefficient_empty_n : IN STD_LOGIC;
    coefficient_read : OUT STD_LOGIC;
    img_width_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    img_width_empty_n : IN STD_LOGIC;
    img_width_read : OUT STD_LOGIC;
    elements_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    elements_loc_empty_n : IN STD_LOGIC;
    elements_loc_read : OUT STD_LOGIC;
    elements_loc_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    elements_loc_out_full_n : IN STD_LOGIC;
    elements_loc_out_write : OUT STD_LOGIC );
end;


architecture behav of convolve_fpga_compute_dataflow_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_pp4_stage1 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv12_FF9 : STD_LOGIC_VECTOR (11 downto 0) := "111111111001";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv33_1FFFFFFFF : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111111111111111111";
    constant ap_const_lv33_1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000001";
    constant ap_const_lv33_2 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000010";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal window_mem_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_mem_0_ce0 : STD_LOGIC;
    signal window_mem_0_we0 : STD_LOGIC;
    signal window_mem_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_mem_0_ce1 : STD_LOGIC;
    signal window_mem_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_1_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_mem_1_ce0 : STD_LOGIC;
    signal window_mem_1_we0 : STD_LOGIC;
    signal window_mem_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_1_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_mem_1_ce1 : STD_LOGIC;
    signal window_mem_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_2_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_mem_2_ce0 : STD_LOGIC;
    signal window_mem_2_we0 : STD_LOGIC;
    signal window_mem_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_2_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal window_mem_2_ce1 : STD_LOGIC;
    signal window_mem_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal coef_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal coef_V_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal write_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp4_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage1 : signal is "none";
    signal ap_enable_reg_pp4_iter5 : STD_LOGIC := '0';
    signal ap_block_pp4_stage1 : BOOLEAN;
    signal read_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln55_reg_2292 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal icmp_ln61_reg_2301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal gmem3_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem3_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal coefficient_blk_n : STD_LOGIC;
    signal img_width_blk_n : STD_LOGIC;
    signal elements_loc_blk_n : STD_LOGIC;
    signal elements_loc_out_blk_n : STD_LOGIC;
    signal i_reg_415 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_415_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_415_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_427 : STD_LOGIC_VECTOR (30 downto 0);
    signal ii_reg_439 : STD_LOGIC_VECTOR (30 downto 0);
    signal ii_reg_439_pp2_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state23_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal ii_1_reg_451 : STD_LOGIC_VECTOR (1 downto 0);
    signal ii_1_reg_451_pp3_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state27_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state28_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state29_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal dec531_in_i_i_reg_463 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal top_idx_1_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal insert_column_idx_reg_496 : STD_LOGIC_VECTOR (31 downto 0);
    signal insert_idx_reg_507 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state32_pp4_stage1_iter0 : BOOLEAN;
    signal ap_block_state34_pp4_stage1_iter1 : BOOLEAN;
    signal ap_block_state36_pp4_stage1_iter2 : BOOLEAN;
    signal ap_block_state38_pp4_stage1_iter3 : BOOLEAN;
    signal ap_block_state40_pp4_stage1_iter4 : BOOLEAN;
    signal ap_block_state42_pp4_stage1_iter5 : BOOLEAN;
    signal ap_block_pp4_stage1_11001 : BOOLEAN;
    signal reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state31_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state33_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state35_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_state37_pp4_stage0_iter3 : BOOLEAN;
    signal ap_block_state39_pp4_stage0_iter4 : BOOLEAN;
    signal ap_block_state41_pp4_stage0_iter5 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal img_width_read_reg_2135 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal elements_loc_read_reg_2145 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_reg_2151 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln42_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_2157 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln42_fu_603_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln42_reg_2161 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal gmem3_addr_read_reg_2166 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_addr_read_reg_2166_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln555_fu_617_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln555_reg_2177 : STD_LOGIC_VECTOR (62 downto 0);
    signal p_Result_3_reg_2182 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_2182_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_2182_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_tmp_V_reg_2187 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_639_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_2192 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_2192_pp0_iter5_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln565_reg_2192_pp0_iter6_reg : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln571_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_2197 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_2197_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_2197_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln571_reg_2197_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal F2_fu_651_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_reg_2204 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_2211 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_2211_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_2211_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln581_reg_2211_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sh_amt_fu_683_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2218 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2218_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_reg_2218_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln582_fu_690_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_2225 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_reg_2225_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_reg_2231 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln570_fu_722_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln570_reg_2236 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln583_fu_729_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_2241 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln583_reg_2241_pp0_iter8_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln585_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_reg_2247 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_reg_2247_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_2253 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_reg_2253_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_reg_2258 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_786_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_reg_2263 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln585_fu_796_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln585_reg_2268 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln48_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal trunc_ln48_fu_937_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln48_reg_2277 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln48_1_fu_940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_reg_2283 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state20_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state21_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln48_fu_945_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln48_reg_2287 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal icmp_ln55_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_2292_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_961_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln55_reg_2296 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal icmp_ln61_fu_972_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln61_reg_2301_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln61_fu_978_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln61_reg_2305 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal icmp_ln70_fu_989_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal sext_ln70_fu_994_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext_ln70_reg_2314 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln35_fu_997_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln35_reg_2320 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln74_fu_1007_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln74_reg_2326 : STD_LOGIC_VECTOR (32 downto 0);
    signal trunc_ln75_fu_1013_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_reg_2332 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_reg_2332_pp4_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln74_1_fu_1017_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln74_1_reg_2338 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln74_2_fu_1023_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln74_2_reg_2345 : STD_LOGIC_VECTOR (32 downto 0);
    signal add_ln81_fu_1029_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln81_reg_2350 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_1035_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_reg_2356 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln75_fu_1057_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_reg_2362 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_reg_2362_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_1_fu_1079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_1_reg_2385 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_1_reg_2385_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_2_fu_1094_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_2_reg_2393 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln81_fu_1105_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln81_reg_2416 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_7_fu_1112_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_7_reg_2421 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln75_7_reg_2421_pp4_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal window_line_idx_fu_1120_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_line_idx_reg_2428 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_1128_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_reg_2433 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln70_1_fu_1135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_2438 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_reg_2438_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal window_mem_0_load_2_reg_2457 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_1_load_2_reg_2464 : STD_LOGIC_VECTOR (31 downto 0);
    signal window_mem_2_load_2_reg_2471 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln81_1_fu_1157_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln81_1_reg_2478 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln92_fu_1176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln92_reg_2487 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln95_fu_1182_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln95_reg_2493 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_1_fu_1188_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln75_1_reg_2499 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln75_6_fu_1211_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_6_reg_2504 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln75_4_reg_2509 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln703_2_fu_1225_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln703_2_reg_2514 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_2520 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_8_fu_1242_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln75_8_reg_2525 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln75_13_fu_1265_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_13_reg_2530 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln75_s_reg_2535 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_2540 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_15_fu_1300_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_15_reg_2545 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln75_1_reg_2550 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_reg_2555 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln703_8_fu_1365_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal insert_idx_1_fu_1405_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal insert_idx_1_reg_2582 : STD_LOGIC_VECTOR (31 downto 0);
    signal insert_column_idx_1_fu_1413_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal insert_column_idx_1_reg_2587 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_2_fu_1426_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_2_reg_2592 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_2597 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln703_fu_1440_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln703_reg_2602 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_2609 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln703_1_fu_1497_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_2_fu_1528_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln75_9_fu_1545_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_9_reg_2658 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln75_6_reg_2663 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_2668 : STD_LOGIC_VECTOR (7 downto 0);
    signal and_ln703_4_fu_1602_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_7_fu_1659_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_fu_1690_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_3_fu_1708_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_3_reg_2744 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_5_fu_1723_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln703_6_fu_1741_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1944_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1950_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1956_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1962_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1968_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1974_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2004_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2010_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2016_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2022_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2028_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2034_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1980_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp4_iter3 : STD_LOGIC := '0';
    signal grp_fu_1988_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1996_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_20_reg_2875 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2104_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_reg_2880 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp4_iter4 : STD_LOGIC := '0';
    signal grp_fu_2080_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_1_reg_2885 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2040_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_3_reg_2890 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2064_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_5_reg_2895 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2112_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_8_reg_2900 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2088_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_9_reg_2905 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2048_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_11_reg_2910 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2072_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_13_reg_2915 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2120_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_16_reg_2920 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2096_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_17_reg_2925 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2056_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_19_reg_2930 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_7_fu_1763_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_7_reg_2935 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_15_fu_1777_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_15_reg_2940 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_23_fu_1791_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_23_reg_2945 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_2950 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln851_fu_1807_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln851_reg_2957 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln850_1_reg_2962 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln851_1_fu_1821_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln851_1_reg_2969 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln850_2_reg_2974 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln851_2_fu_1835_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln851_2_reg_2981 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln850_3_fu_1863_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln850_3_reg_2986 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln850_4_fu_1894_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln850_4_reg_2991 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln850_5_fu_1925_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln850_5_reg_2996 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state20 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state27 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage1_subdone : BOOLEAN;
    signal ap_condition_pp4_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_i_phi_fu_419_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i_1_phi_fu_431_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_ii_phi_fu_443_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_phi_mux_ii_1_phi_fu_455_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_dec531_in_i_i_phi_fu_466_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_phi_mux_j_phi_fu_476_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_top_idx_1_phi_fu_488_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_insert_column_idx_phi_fu_500_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_insert_idx_phi_fu_511_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_cast_i_i_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ii_cast_i_i_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ii_1_cast_i_i_fu_984_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_1063_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_1140_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln92_fu_1165_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln571_fu_871_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp4_stage1_01001 : BOOLEAN;
    signal trunc_ln92_fu_1172_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_519_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_555_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln1_fu_577_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln455_fu_643_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_657_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln581_fu_673_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_4_fu_705_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln569_fu_712_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal man_V_1_fu_716_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln586_fu_743_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln586_fu_746_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_750_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal xor_ln571_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln582_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln586_1_fu_755_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln582_fu_769_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_807_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln581_fu_804_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln581cast_fu_822_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln585_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_1_fu_836_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_814_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln581_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_826_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln585_1_fu_841_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln603_fu_863_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_cast_i_i_fu_1003_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln75_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_1_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_2_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_3_fu_1074_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_4_fu_1085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_5_fu_1090_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_fu_1100_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_1_fu_1147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln81_1_fu_1152_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_544_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_1192_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_5_fu_1200_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_2_fu_1204_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_555_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_1246_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_12_fu_1254_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_5_fu_1258_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_566_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_14_fu_1289_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_6_fu_1293_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1324_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln75_18_fu_1332_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_8_fu_1336_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln75_5_fu_1347_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_19_fu_1343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_1375_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln95_fu_1393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_fu_1389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln95_fu_1398_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln75_fu_1420_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln75_3_fu_1457_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_1_fu_1461_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln75_2_fu_1472_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln703_1_fu_1490_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln75_4_fu_1468_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_1507_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln75_3_fu_1539_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln75_10_fu_1569_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_4_fu_1573_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln75_8_fu_1584_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_11_fu_1580_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_1612_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_16_fu_1626_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln75_7_fu_1630_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal lshr_ln75_3_fu_1641_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln75_17_fu_1637_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_fu_1669_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_2_fu_1755_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln703_2_fu_1755_p2 : signal is "no";
    signal add_ln703_6_fu_1759_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln703_6_fu_1759_p2 : signal is "no";
    signal add_ln703_10_fu_1769_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln703_10_fu_1769_p2 : signal is "no";
    signal add_ln703_14_fu_1773_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln703_14_fu_1773_p2 : signal is "no";
    signal grp_fu_2128_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_18_fu_1783_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln703_18_fu_1783_p2 : signal is "no";
    signal add_ln703_22_fu_1787_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln703_22_fu_1787_p2 : signal is "no";
    signal icmp_ln851_fu_1846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln695_fu_1851_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_1839_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_fu_1856_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln851_1_fu_1877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln695_1_fu_1882_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_fu_1870_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_1_fu_1887_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln851_2_fu_1908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln695_2_fu_1913_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_fu_1901_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln850_2_fu_1918_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_i_i_fu_1932_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1944_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1950_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1956_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1962_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1968_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1974_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1980_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1988_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1996_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2004_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2010_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2016_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2022_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2028_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2034_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2040_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2048_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2056_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2064_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2072_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2080_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2088_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2096_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2104_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2112_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2120_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2128_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_519_ce : STD_LOGIC;
    signal grp_fu_1944_ce : STD_LOGIC;
    signal grp_fu_1950_ce : STD_LOGIC;
    signal grp_fu_1956_ce : STD_LOGIC;
    signal grp_fu_1962_ce : STD_LOGIC;
    signal grp_fu_1968_ce : STD_LOGIC;
    signal grp_fu_1974_ce : STD_LOGIC;
    signal grp_fu_1980_ce : STD_LOGIC;
    signal grp_fu_1988_ce : STD_LOGIC;
    signal grp_fu_1996_ce : STD_LOGIC;
    signal grp_fu_2004_ce : STD_LOGIC;
    signal grp_fu_2010_ce : STD_LOGIC;
    signal grp_fu_2016_ce : STD_LOGIC;
    signal grp_fu_2022_ce : STD_LOGIC;
    signal grp_fu_2028_ce : STD_LOGIC;
    signal grp_fu_2034_ce : STD_LOGIC;
    signal grp_fu_2040_ce : STD_LOGIC;
    signal grp_fu_2048_ce : STD_LOGIC;
    signal grp_fu_2056_ce : STD_LOGIC;
    signal grp_fu_2064_ce : STD_LOGIC;
    signal grp_fu_2072_ce : STD_LOGIC;
    signal grp_fu_2080_ce : STD_LOGIC;
    signal grp_fu_2088_ce : STD_LOGIC;
    signal grp_fu_2096_ce : STD_LOGIC;
    signal grp_fu_2104_ce : STD_LOGIC;
    signal grp_fu_2112_ce : STD_LOGIC;
    signal grp_fu_2120_ce : STD_LOGIC;
    signal grp_fu_2128_ce : STD_LOGIC;
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal grp_fu_1944_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1950_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1956_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1962_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1968_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1974_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1980_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1988_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1996_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2004_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2010_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2016_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2022_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2028_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2034_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2040_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2048_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2056_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2064_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2072_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2080_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2088_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2096_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2104_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2112_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2120_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2128_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component convolve_fpga_fpext_32ns_64_3_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component convolve_fpga_mux_32_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolve_fpga_mul_mul_8ns_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_fpga_mul_mul_16s_8ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component convolve_fpga_compute_dataflow_1_window_mem_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    window_mem_0_U : component convolve_fpga_compute_dataflow_1_window_mem_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_mem_0_address0,
        ce0 => window_mem_0_ce0,
        we0 => window_mem_0_we0,
        d0 => window_mem_0_d0,
        q0 => window_mem_0_q0,
        address1 => window_mem_0_address1,
        ce1 => window_mem_0_ce1,
        q1 => window_mem_0_q1);

    window_mem_1_U : component convolve_fpga_compute_dataflow_1_window_mem_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_mem_1_address0,
        ce0 => window_mem_1_ce0,
        we0 => window_mem_1_we0,
        d0 => reg_522,
        q0 => window_mem_1_q0,
        address1 => window_mem_1_address1,
        ce1 => window_mem_1_ce1,
        q1 => window_mem_1_q1);

    window_mem_2_U : component convolve_fpga_compute_dataflow_1_window_mem_0
    generic map (
        DataWidth => 32,
        AddressRange => 1920,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => window_mem_2_address0,
        ce0 => window_mem_2_ce0,
        we0 => window_mem_2_we0,
        d0 => reg_522,
        q0 => window_mem_2_q0,
        address1 => window_mem_2_address1,
        ce1 => window_mem_2_ce1,
        q1 => window_mem_2_q1);

    fpext_32ns_64_3_no_dsp_1_U20 : component convolve_fpga_fpext_32ns_64_3_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_519_p0,
        ce => grp_fu_519_ce,
        dout => grp_fu_519_p1);

    mux_32_32_1_1_U21 : component convolve_fpga_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_529,
        din1 => reg_534,
        din2 => reg_539,
        din3 => trunc_ln75_reg_2332_pp4_iter1_reg,
        dout => grp_fu_544_p5);

    mux_32_32_1_1_U22 : component convolve_fpga_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_529,
        din1 => reg_534,
        din2 => reg_539,
        din3 => grp_fu_555_p4,
        dout => grp_fu_555_p5);

    mux_32_32_1_1_U23 : component convolve_fpga_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => reg_529,
        din1 => reg_534,
        din2 => reg_539,
        din3 => select_ln81_1_reg_2478,
        dout => grp_fu_566_p5);

    mux_32_32_1_1_U24 : component convolve_fpga_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => window_mem_0_load_2_reg_2457,
        din1 => window_mem_1_load_2_reg_2464,
        din2 => window_mem_2_load_2_reg_2471,
        din3 => trunc_ln75_reg_2332_pp4_iter1_reg,
        dout => tmp_2_fu_1192_p5);

    mux_32_32_1_1_U25 : component convolve_fpga_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => window_mem_0_load_2_reg_2457,
        din1 => window_mem_1_load_2_reg_2464,
        din2 => window_mem_2_load_2_reg_2471,
        din3 => trunc_ln75_7_reg_2421,
        dout => tmp_5_fu_1246_p5);

    mux_32_32_1_1_U26 : component convolve_fpga_mux_32_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => window_mem_0_load_2_reg_2457,
        din1 => window_mem_1_load_2_reg_2464,
        din2 => window_mem_2_load_2_reg_2471,
        din3 => select_ln81_1_reg_2478,
        dout => tmp_8_fu_1324_p5);

    mul_mul_8ns_16s_16_4_1_U27 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1944_p0,
        din1 => and_ln703_8_fu_1365_p2,
        ce => grp_fu_1944_ce,
        dout => grp_fu_1944_p2);

    mul_mul_16s_8ns_16_4_1_U28 : component convolve_fpga_mul_mul_16s_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_8_fu_1365_p2,
        din1 => grp_fu_1950_p1,
        ce => grp_fu_1950_ce,
        dout => grp_fu_1950_p2);

    mul_mul_16s_8ns_16_4_1_U29 : component convolve_fpga_mul_mul_16s_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_8_fu_1365_p2,
        din1 => grp_fu_1956_p1,
        ce => grp_fu_1956_ce,
        dout => grp_fu_1956_p2);

    mul_mul_8ns_16s_16_4_1_U30 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1962_p0,
        din1 => and_ln703_1_fu_1497_p2,
        ce => grp_fu_1962_ce,
        dout => grp_fu_1962_p2);

    mul_mul_16s_8ns_16_4_1_U31 : component convolve_fpga_mul_mul_16s_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_1_fu_1497_p2,
        din1 => grp_fu_1968_p1,
        ce => grp_fu_1968_ce,
        dout => grp_fu_1968_p2);

    mul_mul_16s_8ns_16_4_1_U32 : component convolve_fpga_mul_mul_16s_8ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_1_fu_1497_p2,
        din1 => grp_fu_1974_p1,
        ce => grp_fu_1974_ce,
        dout => grp_fu_1974_p2);

    mac_muladd_8ns_16s_16s_16_4_1_U33 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_1980_p0,
        din1 => and_ln703_2_fu_1528_p2,
        din2 => grp_fu_1944_p2,
        ce => grp_fu_1980_ce,
        dout => grp_fu_1980_p3);

    mac_muladd_16s_8ns_16s_16_4_1_U34 : component convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_2_fu_1528_p2,
        din1 => grp_fu_1988_p1,
        din2 => grp_fu_1950_p2,
        ce => grp_fu_1988_ce,
        dout => grp_fu_1988_p3);

    mac_muladd_16s_8ns_16s_16_4_1_U35 : component convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_2_fu_1528_p2,
        din1 => grp_fu_1996_p1,
        din2 => grp_fu_1956_p2,
        ce => grp_fu_1996_ce,
        dout => grp_fu_1996_p3);

    mul_mul_8ns_16s_16_4_1_U36 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2004_p0,
        din1 => and_ln703_4_fu_1602_p2,
        ce => grp_fu_2004_ce,
        dout => grp_fu_2004_p2);

    mul_mul_8ns_16s_16_4_1_U37 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2010_p0,
        din1 => and_ln703_4_fu_1602_p2,
        ce => grp_fu_2010_ce,
        dout => grp_fu_2010_p2);

    mul_mul_8ns_16s_16_4_1_U38 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2016_p0,
        din1 => and_ln703_4_fu_1602_p2,
        ce => grp_fu_2016_ce,
        dout => grp_fu_2016_p2);

    mul_mul_8ns_16s_16_4_1_U39 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2022_p0,
        din1 => and_ln703_7_fu_1659_p2,
        ce => grp_fu_2022_ce,
        dout => grp_fu_2022_p2);

    mul_mul_8ns_16s_16_4_1_U40 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2028_p0,
        din1 => and_ln703_7_fu_1659_p2,
        ce => grp_fu_2028_ce,
        dout => grp_fu_2028_p2);

    mul_mul_8ns_16s_16_4_1_U41 : component convolve_fpga_mul_mul_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2034_p0,
        din1 => and_ln703_7_fu_1659_p2,
        ce => grp_fu_2034_ce,
        dout => grp_fu_2034_p2);

    mac_muladd_8ns_16s_16s_16_4_1_U42 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2040_p0,
        din1 => and_ln703_fu_1690_p2,
        din2 => grp_fu_1962_p2,
        ce => grp_fu_2040_ce,
        dout => grp_fu_2040_p3);

    mac_muladd_16s_8ns_16s_16_4_1_U43 : component convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_fu_1690_p2,
        din1 => grp_fu_2048_p1,
        din2 => grp_fu_1968_p2,
        ce => grp_fu_2048_ce,
        dout => grp_fu_2048_p3);

    mac_muladd_16s_8ns_16s_16_4_1_U44 : component convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => and_ln703_fu_1690_p2,
        din1 => grp_fu_2056_p1,
        din2 => grp_fu_1974_p2,
        ce => grp_fu_2056_ce,
        dout => grp_fu_2056_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U45 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2064_p0,
        din1 => and_ln703_3_fu_1708_p2,
        din2 => grp_fu_1980_p3,
        ce => grp_fu_2064_ce,
        dout => grp_fu_2064_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U46 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2072_p0,
        din1 => and_ln703_3_fu_1708_p2,
        din2 => grp_fu_1988_p3,
        ce => grp_fu_2072_ce,
        dout => grp_fu_2072_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U47 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2080_p0,
        din1 => and_ln703_5_fu_1723_p2,
        din2 => grp_fu_2004_p2,
        ce => grp_fu_2080_ce,
        dout => grp_fu_2080_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U48 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2088_p0,
        din1 => and_ln703_5_fu_1723_p2,
        din2 => grp_fu_2010_p2,
        ce => grp_fu_2088_ce,
        dout => grp_fu_2088_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U49 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2096_p0,
        din1 => and_ln703_5_fu_1723_p2,
        din2 => grp_fu_2016_p2,
        ce => grp_fu_2096_ce,
        dout => grp_fu_2096_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U50 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2104_p0,
        din1 => and_ln703_6_fu_1741_p2,
        din2 => grp_fu_2022_p2,
        ce => grp_fu_2104_ce,
        dout => grp_fu_2104_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U51 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2112_p0,
        din1 => and_ln703_6_fu_1741_p2,
        din2 => grp_fu_2028_p2,
        ce => grp_fu_2112_ce,
        dout => grp_fu_2112_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U52 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2120_p0,
        din1 => and_ln703_6_fu_1741_p2,
        din2 => grp_fu_2034_p2,
        ce => grp_fu_2120_ce,
        dout => grp_fu_2120_p3);

    mac_muladd_8ns_16s_16s_16_4_1_U53 : component convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 8,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2128_p0,
        din1 => and_ln703_3_reg_2744,
        din2 => add_ln703_20_reg_2875,
        ce => grp_fu_2128_ce,
        dout => grp_fu_2128_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln48_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state20) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state20);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((icmp_ln48_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state23)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state23);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state27) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state27)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state27);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp4_flush_enable)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
                    ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
                    ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
                    ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
                elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    ap_enable_reg_pp4_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dec531_in_i_i_reg_463_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_1_reg_2438 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                dec531_in_i_i_reg_463 <= add_ln35_reg_2320;
            elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                dec531_in_i_i_reg_463 <= elements_loc_read_reg_2145;
            end if; 
        end if;
    end process;

    i_1_reg_427_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                i_1_reg_427 <= ap_const_lv31_0;
            elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln48_1_reg_2283 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_1_reg_427 <= add_ln48_reg_2287;
            end if; 
        end if;
    end process;

    i_reg_415_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_415 <= ap_const_lv4_0;
            elsif (((icmp_ln42_reg_2157 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_415 <= add_ln42_reg_2161;
            end if; 
        end if;
    end process;

    ii_1_reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                ii_1_reg_451 <= ap_const_lv2_0;
            elsif (((icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then 
                ii_1_reg_451 <= add_ln61_reg_2305;
            end if; 
        end if;
    end process;

    ii_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                ii_reg_439 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                ii_reg_439 <= add_ln55_reg_2296;
            end if; 
        end if;
    end process;

    insert_column_idx_reg_496_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln70_1_reg_2438_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                insert_column_idx_reg_496 <= insert_column_idx_1_reg_2587;
            elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                insert_column_idx_reg_496 <= ap_const_lv32_3;
            end if; 
        end if;
    end process;

    insert_idx_reg_507_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln70_1_reg_2438_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                insert_idx_reg_507 <= insert_idx_1_reg_2582;
            elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                insert_idx_reg_507 <= ap_const_lv32_2;
            end if; 
        end if;
    end process;

    j_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_1_reg_2438 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                j_reg_472 <= j_2_reg_2433;
            elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                j_reg_472 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    reg_529_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp4_iter1 = ap_const_logic_1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then 
                    reg_529 <= window_mem_0_q1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                    reg_529 <= window_mem_0_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_534_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp4_iter1 = ap_const_logic_1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then 
                    reg_534 <= window_mem_1_q1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                    reg_534 <= window_mem_1_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_539_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp4_iter1 = ap_const_logic_1)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then 
                    reg_539 <= window_mem_2_q1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                    reg_539 <= window_mem_2_q0;
                end if;
            end if; 
        end if;
    end process;

    top_idx_1_reg_484_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_1_reg_2438 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then 
                top_idx_1_reg_484 <= window_line_idx_reg_2428;
            elsif (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                top_idx_1_reg_484 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                F2_reg_2204 <= F2_fu_651_p2;
                exp_tmp_V_reg_2187 <= ireg_fu_613_p1(62 downto 52);
                gmem3_addr_read_reg_2166_pp0_iter2_reg <= gmem3_addr_read_reg_2166;
                gmem3_addr_read_reg_2166_pp0_iter3_reg <= gmem3_addr_read_reg_2166_pp0_iter2_reg;
                gmem3_addr_read_reg_2166_pp0_iter4_reg <= gmem3_addr_read_reg_2166_pp0_iter3_reg;
                gmem3_addr_read_reg_2166_pp0_iter5_reg <= gmem3_addr_read_reg_2166_pp0_iter4_reg;
                gmem3_addr_read_reg_2166_pp0_iter6_reg <= gmem3_addr_read_reg_2166_pp0_iter5_reg;
                gmem3_addr_read_reg_2166_pp0_iter7_reg <= gmem3_addr_read_reg_2166_pp0_iter6_reg;
                gmem3_addr_read_reg_2166_pp0_iter8_reg <= gmem3_addr_read_reg_2166_pp0_iter7_reg;
                i_reg_415_pp0_iter2_reg <= i_reg_415_pp0_iter1_reg;
                i_reg_415_pp0_iter3_reg <= i_reg_415_pp0_iter2_reg;
                i_reg_415_pp0_iter4_reg <= i_reg_415_pp0_iter3_reg;
                i_reg_415_pp0_iter5_reg <= i_reg_415_pp0_iter4_reg;
                i_reg_415_pp0_iter6_reg <= i_reg_415_pp0_iter5_reg;
                i_reg_415_pp0_iter7_reg <= i_reg_415_pp0_iter6_reg;
                i_reg_415_pp0_iter8_reg <= i_reg_415_pp0_iter7_reg;
                icmp_ln571_reg_2197 <= icmp_ln571_fu_646_p2;
                icmp_ln571_reg_2197_pp0_iter6_reg <= icmp_ln571_reg_2197;
                icmp_ln571_reg_2197_pp0_iter7_reg <= icmp_ln571_reg_2197_pp0_iter6_reg;
                icmp_ln571_reg_2197_pp0_iter8_reg <= icmp_ln571_reg_2197_pp0_iter7_reg;
                icmp_ln581_reg_2211 <= icmp_ln581_fu_667_p2;
                icmp_ln581_reg_2211_pp0_iter6_reg <= icmp_ln581_reg_2211;
                icmp_ln581_reg_2211_pp0_iter7_reg <= icmp_ln581_reg_2211_pp0_iter6_reg;
                icmp_ln581_reg_2211_pp0_iter8_reg <= icmp_ln581_reg_2211_pp0_iter7_reg;
                icmp_ln582_reg_2225_pp0_iter7_reg <= icmp_ln582_reg_2225;
                icmp_ln585_reg_2247_pp0_iter8_reg <= icmp_ln585_reg_2247;
                icmp_ln603_reg_2253_pp0_iter8_reg <= icmp_ln603_reg_2253;
                p_Result_3_reg_2182 <= ireg_fu_613_p1(63 downto 63);
                p_Result_3_reg_2182_pp0_iter5_reg <= p_Result_3_reg_2182;
                p_Result_3_reg_2182_pp0_iter6_reg <= p_Result_3_reg_2182_pp0_iter5_reg;
                sh_amt_reg_2218_pp0_iter7_reg <= sh_amt_reg_2218;
                sh_amt_reg_2218_pp0_iter8_reg <= sh_amt_reg_2218_pp0_iter7_reg;
                trunc_ln555_reg_2177 <= trunc_ln555_fu_617_p1;
                trunc_ln565_reg_2192 <= trunc_ln565_fu_639_p1;
                trunc_ln565_reg_2192_pp0_iter5_reg <= trunc_ln565_reg_2192;
                trunc_ln565_reg_2192_pp0_iter6_reg <= trunc_ln565_reg_2192_pp0_iter5_reg;
                trunc_ln583_reg_2241_pp0_iter8_reg <= trunc_ln583_reg_2241;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln35_reg_2320 <= add_ln35_fu_997_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln42_reg_2161 <= add_ln42_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                add_ln48_reg_2287 <= add_ln48_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                add_ln55_reg_2296 <= add_ln55_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                add_ln61_reg_2305 <= add_ln61_fu_978_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln703_11_reg_2910 <= grp_fu_2048_p3;
                add_ln703_13_reg_2915 <= grp_fu_2072_p3;
                add_ln703_16_reg_2920 <= grp_fu_2120_p3;
                add_ln703_17_reg_2925 <= grp_fu_2096_p3;
                add_ln703_19_reg_2930 <= grp_fu_2056_p3;
                add_ln703_1_reg_2885 <= grp_fu_2080_p3;
                add_ln703_3_reg_2890 <= grp_fu_2040_p3;
                add_ln703_5_reg_2895 <= grp_fu_2064_p3;
                add_ln703_8_reg_2900 <= grp_fu_2112_p3;
                add_ln703_9_reg_2905 <= grp_fu_2088_p3;
                add_ln703_reg_2880 <= grp_fu_2104_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                add_ln703_15_reg_2940 <= add_ln703_15_fu_1777_p2;
                add_ln703_23_reg_2945 <= add_ln703_23_fu_1791_p2;
                add_ln703_7_reg_2935 <= add_ln703_7_fu_1763_p2;
                and_ln703_3_reg_2744 <= and_ln703_3_fu_1708_p2;
                and_ln75_1_reg_2385 <= and_ln75_1_fu_1079_p2;
                and_ln75_1_reg_2385_pp4_iter1_reg <= and_ln75_1_reg_2385;
                and_ln75_2_reg_2393 <= and_ln75_2_fu_1094_p2;
                and_ln75_reg_2362 <= and_ln75_fu_1057_p2;
                and_ln75_reg_2362_pp4_iter1_reg <= and_ln75_reg_2362;
                icmp_ln70_1_reg_2438 <= icmp_ln70_1_fu_1135_p2;
                icmp_ln70_1_reg_2438_pp4_iter1_reg <= icmp_ln70_1_reg_2438;
                lshr_ln75_1_reg_2550 <= select_ln75_6_fu_1293_p3(15 downto 8);
                lshr_ln75_4_reg_2509 <= select_ln75_2_fu_1204_p3(15 downto 8);
                lshr_ln75_s_reg_2535 <= select_ln75_5_fu_1258_p3(15 downto 8);
                select_ln703_2_reg_2514 <= select_ln703_2_fu_1225_p3;
                select_ln81_reg_2416 <= select_ln81_fu_1105_p3;
                tmp_10_reg_2520 <= select_ln75_2_fu_1204_p3(23 downto 16);
                tmp_13_reg_2540 <= select_ln75_5_fu_1258_p3(23 downto 16);
                tmp_14_reg_2555 <= select_ln75_6_fu_1293_p3(23 downto 16);
                trunc_ln75_13_reg_2530 <= trunc_ln75_13_fu_1265_p1;
                trunc_ln75_15_reg_2545 <= trunc_ln75_15_fu_1300_p1;
                trunc_ln75_6_reg_2504 <= trunc_ln75_6_fu_1211_p1;
                trunc_ln75_7_reg_2421 <= trunc_ln75_7_fu_1112_p1;
                trunc_ln75_7_reg_2421_pp4_iter1_reg <= trunc_ln75_7_reg_2421;
                trunc_ln850_1_reg_2962 <= add_ln703_15_fu_1777_p2(14 downto 7);
                trunc_ln850_2_reg_2974 <= add_ln703_23_fu_1791_p2(14 downto 7);
                trunc_ln851_1_reg_2969 <= trunc_ln851_1_fu_1821_p1;
                trunc_ln851_2_reg_2981 <= trunc_ln851_2_fu_1835_p1;
                trunc_ln851_reg_2957 <= trunc_ln851_fu_1807_p1;
                trunc_ln_reg_2950 <= add_ln703_7_fu_1763_p2(14 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                add_ln703_20_reg_2875 <= grp_fu_1996_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                add_ln74_1_reg_2338 <= add_ln74_1_fu_1017_p2;
                add_ln74_2_reg_2345 <= add_ln74_2_fu_1023_p2;
                add_ln74_reg_2326 <= add_ln74_fu_1007_p2;
                add_ln81_reg_2350 <= add_ln81_fu_1029_p2;
                add_ln92_reg_2487 <= add_ln92_fu_1176_p2;
                add_ln95_reg_2493 <= add_ln95_fu_1182_p2;
                j_1_reg_2356 <= j_1_fu_1035_p2;
                lshr_ln75_6_reg_2663 <= select_ln75_3_fu_1539_p3(15 downto 8);
                lshr_ln_reg_2597 <= select_ln75_fu_1420_p3(15 downto 8);
                select_ln703_reg_2602 <= select_ln703_fu_1440_p3;
                select_ln81_1_reg_2478 <= select_ln81_1_fu_1157_p3;
                select_ln850_3_reg_2986 <= select_ln850_3_fu_1863_p3;
                select_ln850_4_reg_2991 <= select_ln850_4_fu_1894_p3;
                select_ln850_5_reg_2996 <= select_ln850_5_fu_1925_p3;
                tmp_11_reg_2668 <= select_ln75_3_fu_1539_p3(23 downto 16);
                tmp_9_reg_2609 <= select_ln75_fu_1420_p3(23 downto 16);
                trunc_ln75_2_reg_2592 <= trunc_ln75_2_fu_1426_p1;
                trunc_ln75_9_reg_2658 <= trunc_ln75_9_fu_1545_p1;
                trunc_ln75_reg_2332 <= trunc_ln75_fu_1013_p1;
                trunc_ln75_reg_2332_pp4_iter1_reg <= trunc_ln75_reg_2332;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_reg_2197_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                and_ln581_reg_2263 <= and_ln581_fu_786_p2;
                or_ln582_reg_2258 <= or_ln582_fu_776_p2;
                select_ln585_reg_2268 <= select_ln585_fu_796_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_0 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_1 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_2 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_3 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_4 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_5 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_6 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_reg_415_pp0_iter8_reg = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_7 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_reg_415_pp0_iter8_reg = ap_const_lv4_3)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_2)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_1)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_0)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_7)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_6)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_5)) and not((i_reg_415_pp0_iter8_reg = ap_const_lv4_4)) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                coef_V_8 <= select_ln571_fu_871_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                elements_loc_read_reg_2145 <= elements_loc_dout;
                gmem3_addr_reg_2151 <= sext_ln42_fu_587_p1;
                img_width_read_reg_2135 <= img_width_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                gmem3_addr_read_reg_2166 <= m_axi_gmem3_RDATA;
                i_reg_415_pp0_iter1_reg <= i_reg_415;
                icmp_ln42_reg_2157 <= icmp_ln42_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln48_1_reg_2283 <= icmp_ln48_1_fu_940_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln55_reg_2292 <= icmp_ln55_fu_956_p2;
                icmp_ln55_reg_2292_pp2_iter1_reg <= icmp_ln55_reg_2292;
                ii_reg_439_pp2_iter1_reg <= ii_reg_439;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_reg_2197 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln582_reg_2225 <= icmp_ln582_fu_690_p2;
                sh_amt_reg_2218 <= sh_amt_fu_683_p3;
                tmp_20_reg_2231 <= sh_amt_fu_683_p3(11 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln571_reg_2197_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln585_reg_2247 <= icmp_ln585_fu_733_p2;
                icmp_ln603_reg_2253 <= icmp_ln603_fu_738_p2;
                select_ln570_reg_2236 <= select_ln570_fu_722_p3;
                trunc_ln583_reg_2241 <= trunc_ln583_fu_729_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001))) then
                icmp_ln61_reg_2301 <= icmp_ln61_fu_972_p2;
                icmp_ln61_reg_2301_pp3_iter1_reg <= icmp_ln61_reg_2301;
                ii_1_reg_451_pp3_iter1_reg <= ii_1_reg_451;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                insert_column_idx_1_reg_2587 <= insert_column_idx_1_fu_1413_p3;
                insert_idx_1_reg_2582 <= insert_idx_1_fu_1405_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                j_2_reg_2433 <= j_2_fu_1128_p3;
                window_line_idx_reg_2428 <= window_line_idx_fu_1120_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)) or ((icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then
                reg_522 <= read_stream_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                sext_ln70_reg_2314 <= sext_ln70_fu_994_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln48_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                trunc_ln48_reg_2277 <= trunc_ln48_fu_937_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = and_ln75_reg_2362) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001))) then
                trunc_ln75_1_reg_2499 <= trunc_ln75_1_fu_1188_p1;
                trunc_ln75_8_reg_2525 <= trunc_ln75_8_fu_1242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                window_mem_0_load_2_reg_2457 <= window_mem_0_q1;
                window_mem_1_load_2_reg_2464 <= window_mem_1_q1;
                window_mem_2_load_2_reg_2471 <= window_mem_2_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem3_ARREADY, coefficient_empty_n, img_width_empty_n, elements_loc_empty_n, elements_loc_out_full_n, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter5, ap_enable_reg_pp2_iter1, ap_enable_reg_pp3_iter1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, icmp_ln42_fu_597_p2, ap_enable_reg_pp0_iter0, icmp_ln48_fu_932_p2, ap_CS_fsm_state19, icmp_ln48_1_fu_940_p2, ap_enable_reg_pp1_iter0, icmp_ln55_fu_956_p2, ap_enable_reg_pp2_iter0, icmp_ln61_fu_972_p2, ap_enable_reg_pp3_iter0, icmp_ln70_fu_989_p2, ap_CS_fsm_state30, ap_enable_reg_pp4_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter2, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter2, ap_block_pp4_stage1_subdone, ap_block_pp4_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_597_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln42_fu_597_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state19 => 
                if (((icmp_ln48_fu_932_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln48_1_fu_940_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln48_1_fu_940_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln55_fu_956_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) and not(((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) or ((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln55_fu_956_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln61_fu_972_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))) and not(((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) or ((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (icmp_ln61_fu_972_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state30 => 
                if (((icmp_ln70_fu_989_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_pp4_stage1 => 
                if ((not(((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage1;
                end if;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_651_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln455_fu_643_p1));
    add_ln35_fu_997_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(ap_phi_mux_dec531_in_i_i_phi_fu_466_p4));
    add_ln42_fu_603_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_phi_fu_419_p4) + unsigned(ap_const_lv4_1));
    add_ln48_fu_945_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_1_phi_fu_431_p4) + unsigned(ap_const_lv31_1));
    add_ln55_fu_961_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_phi_fu_443_p4) + unsigned(ap_const_lv31_1));
    add_ln581_fu_673_p2 <= std_logic_vector(signed(ap_const_lv12_FF9) + signed(F2_reg_2204));
    add_ln61_fu_978_p2 <= std_logic_vector(unsigned(ap_phi_mux_ii_1_phi_fu_455_p4) + unsigned(ap_const_lv2_1));
    add_ln695_1_fu_1882_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(trunc_ln850_1_reg_2962));
    add_ln695_2_fu_1913_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(trunc_ln850_2_reg_2974));
    add_ln695_fu_1851_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(trunc_ln_reg_2950));
    add_ln703_10_fu_1769_p2 <= std_logic_vector(signed(add_ln703_8_reg_2900) + signed(add_ln703_9_reg_2905));
    add_ln703_14_fu_1773_p2 <= std_logic_vector(signed(add_ln703_11_reg_2910) + signed(add_ln703_13_reg_2915));
    add_ln703_15_fu_1777_p2 <= std_logic_vector(unsigned(add_ln703_10_fu_1769_p2) + unsigned(add_ln703_14_fu_1773_p2));
    add_ln703_18_fu_1783_p2 <= std_logic_vector(signed(add_ln703_16_reg_2920) + signed(add_ln703_17_reg_2925));
    add_ln703_22_fu_1787_p2 <= std_logic_vector(signed(add_ln703_19_reg_2930) + signed(grp_fu_2128_p3));
    add_ln703_23_fu_1791_p2 <= std_logic_vector(unsigned(add_ln703_18_fu_1783_p2) + unsigned(add_ln703_22_fu_1787_p2));
    add_ln703_2_fu_1755_p2 <= std_logic_vector(signed(add_ln703_reg_2880) + signed(add_ln703_1_reg_2885));
    add_ln703_6_fu_1759_p2 <= std_logic_vector(signed(add_ln703_3_reg_2890) + signed(add_ln703_5_reg_2895));
    add_ln703_7_fu_1763_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_1755_p2) + unsigned(add_ln703_6_fu_1759_p2));
    add_ln74_1_fu_1017_p2 <= std_logic_vector(unsigned(ap_const_lv33_1) + unsigned(j_cast_i_i_fu_1003_p1));
    add_ln74_2_fu_1023_p2 <= std_logic_vector(unsigned(ap_const_lv33_2) + unsigned(j_cast_i_i_fu_1003_p1));
    add_ln74_fu_1007_p2 <= std_logic_vector(signed(ap_const_lv33_1FFFFFFFF) + signed(j_cast_i_i_fu_1003_p1));
    add_ln81_1_fu_1152_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln75_7_reg_2421));
    add_ln81_fu_1029_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_top_idx_1_phi_fu_488_p4));
    add_ln92_fu_1176_p2 <= std_logic_vector(unsigned(ap_phi_mux_insert_column_idx_phi_fu_500_p4) + unsigned(ap_const_lv32_1));
    add_ln95_fu_1182_p2 <= std_logic_vector(unsigned(ap_phi_mux_insert_idx_phi_fu_511_p4) + unsigned(ap_const_lv32_1));
    and_ln581_fu_786_p2 <= (xor_ln582_fu_780_p2 and icmp_ln581_reg_2211_pp0_iter7_reg);
    and_ln582_fu_764_p2 <= (xor_ln571_fu_759_p2 and icmp_ln582_reg_2225_pp0_iter7_reg);
    and_ln585_1_fu_836_p2 <= (xor_ln585_fu_831_p2 and and_ln581_reg_2263);
    and_ln585_fu_791_p2 <= (icmp_ln585_reg_2247 and and_ln581_fu_786_p2);
    and_ln603_fu_858_p2 <= (xor_ln581_fu_852_p2 and icmp_ln603_reg_2253_pp0_iter8_reg);
    and_ln703_1_fu_1497_p2 <= (select_ln703_1_fu_1490_p3 and coef_V_1);
    and_ln703_2_fu_1528_p2 <= (select_ln703_2_reg_2514 and coef_V_2);
    and_ln703_3_fu_1708_p2 <= (select_ln703_reg_2602 and coef_V_3);
    and_ln703_4_fu_1602_p2 <= (select_ln703_1_fu_1490_p3 and coef_V_4);
    and_ln703_5_fu_1723_p2 <= (select_ln703_2_reg_2514 and coef_V_5);
    and_ln703_6_fu_1741_p2 <= (select_ln703_reg_2602 and coef_V_6);
    and_ln703_7_fu_1659_p2 <= (select_ln703_1_fu_1490_p3 and coef_V_7);
    and_ln703_8_fu_1365_p2 <= (select_ln703_2_fu_1225_p3 and coef_V_8);
    and_ln703_fu_1690_p2 <= (select_ln703_reg_2602 and coef_V_0);
    and_ln75_1_fu_1079_p2 <= (icmp_ln75_3_fu_1074_p2 and icmp_ln75_2_fu_1069_p2);
    and_ln75_2_fu_1094_p2 <= (icmp_ln75_5_fu_1090_p2 and icmp_ln75_4_fu_1085_p2);
    and_ln75_fu_1057_p2 <= (icmp_ln75_fu_1047_p2 and icmp_ln75_1_fu_1053_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(10);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(14);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp4_stage1 <= ap_CS_fsm(17);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state19 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(11);
    ap_CS_fsm_state26 <= ap_CS_fsm(13);
    ap_CS_fsm_state30 <= ap_CS_fsm(15);
    ap_CS_fsm_state43 <= ap_CS_fsm(18);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_gmem3_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_gmem3_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_gmem3_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_gmem3_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp2_stage0_11001_assign_proc : process(read_stream_empty_n, ap_enable_reg_pp2_iter1, icmp_ln55_reg_2292)
    begin
                ap_block_pp2_stage0_11001 <= ((read_stream_empty_n = ap_const_logic_0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp2_stage0_subdone_assign_proc : process(read_stream_empty_n, ap_enable_reg_pp2_iter1, icmp_ln55_reg_2292)
    begin
                ap_block_pp2_stage0_subdone <= ((read_stream_empty_n = ap_const_logic_0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp3_stage0_11001_assign_proc : process(read_stream_empty_n, ap_enable_reg_pp3_iter1, icmp_ln61_reg_2301)
    begin
                ap_block_pp3_stage0_11001 <= ((read_stream_empty_n = ap_const_logic_0) and (icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp3_stage0_subdone_assign_proc : process(read_stream_empty_n, ap_enable_reg_pp3_iter1, icmp_ln61_reg_2301)
    begin
                ap_block_pp3_stage0_subdone <= ((read_stream_empty_n = ap_const_logic_0) and (icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1));
    end process;

        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage1_01001_assign_proc : process(write_stream_full_n, read_stream_empty_n, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter0)
    begin
                ap_block_pp4_stage1_01001 <= (((write_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1)) or ((read_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage1_11001_assign_proc : process(write_stream_full_n, read_stream_empty_n, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter0)
    begin
                ap_block_pp4_stage1_11001 <= (((write_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1)) or ((read_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp4_stage1_subdone_assign_proc : process(write_stream_full_n, read_stream_empty_n, ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter0)
    begin
                ap_block_pp4_stage1_subdone <= (((write_stream_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1)) or ((read_stream_empty_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, coefficient_empty_n, img_width_empty_n, elements_loc_empty_n, elements_loc_out_full_n)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_gmem3_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (m_axi_gmem3_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state24_pp2_stage0_iter1_assign_proc : process(read_stream_empty_n, icmp_ln55_reg_2292)
    begin
                ap_block_state24_pp2_stage0_iter1 <= ((read_stream_empty_n = ap_const_logic_0) and (icmp_ln55_reg_2292 = ap_const_lv1_0));
    end process;

        ap_block_state25_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state28_pp3_stage0_iter1_assign_proc : process(read_stream_empty_n, icmp_ln61_reg_2301)
    begin
                ap_block_state28_pp3_stage0_iter1 <= ((read_stream_empty_n = ap_const_logic_0) and (icmp_ln61_reg_2301 = ap_const_lv1_0));
    end process;

        ap_block_state29_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp4_stage1_iter0_assign_proc : process(read_stream_empty_n)
    begin
                ap_block_state32_pp4_stage1_iter0 <= (read_stream_empty_n = ap_const_logic_0);
    end process;

        ap_block_state33_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp4_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp4_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp4_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp4_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp4_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp4_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp4_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state42_pp4_stage1_iter5_assign_proc : process(write_stream_full_n)
    begin
                ap_block_state42_pp4_stage1_iter5 <= (write_stream_full_n = ap_const_logic_0);
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln42_fu_597_p2)
    begin
        if ((icmp_ln42_fu_597_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state20_assign_proc : process(icmp_ln48_1_fu_940_p2)
    begin
        if ((icmp_ln48_1_fu_940_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state23_assign_proc : process(icmp_ln55_fu_956_p2)
    begin
        if ((icmp_ln55_fu_956_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state27_assign_proc : process(icmp_ln61_fu_972_p2)
    begin
        if ((icmp_ln61_fu_972_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state27 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_flush_enable_assign_proc : process(ap_CS_fsm_pp4_stage1, icmp_ln70_1_fu_1135_p2, ap_block_pp4_stage1_subdone)
    begin
        if (((icmp_ln70_1_fu_1135_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_subdone))) then 
            ap_condition_pp4_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp4_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter5, ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter3, ap_enable_reg_pp4_iter4, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter4 = ap_const_logic_0) and (ap_enable_reg_pp4_iter3 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter5 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_dec531_in_i_i_phi_fu_466_p4_assign_proc : process(dec531_in_i_i_reg_463, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, add_ln35_reg_2320, icmp_ln70_1_reg_2438, ap_block_pp4_stage0)
    begin
        if (((icmp_ln70_1_reg_2438 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_dec531_in_i_i_phi_fu_466_p4 <= add_ln35_reg_2320;
        else 
            ap_phi_mux_dec531_in_i_i_phi_fu_466_p4 <= dec531_in_i_i_reg_463;
        end if; 
    end process;


    ap_phi_mux_i_1_phi_fu_431_p4_assign_proc : process(i_1_reg_427, icmp_ln48_1_reg_2283, ap_CS_fsm_pp1_stage0, add_ln48_reg_2287, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln48_1_reg_2283 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_1_phi_fu_431_p4 <= add_ln48_reg_2287;
        else 
            ap_phi_mux_i_1_phi_fu_431_p4 <= i_1_reg_427;
        end if; 
    end process;


    ap_phi_mux_i_phi_fu_419_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, i_reg_415, icmp_ln42_reg_2157, add_ln42_reg_2161)
    begin
        if (((icmp_ln42_reg_2157 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i_phi_fu_419_p4 <= add_ln42_reg_2161;
        else 
            ap_phi_mux_i_phi_fu_419_p4 <= i_reg_415;
        end if; 
    end process;


    ap_phi_mux_ii_1_phi_fu_455_p4_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln61_reg_2301, ii_1_reg_451, add_ln61_reg_2305)
    begin
        if (((icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_ii_1_phi_fu_455_p4 <= add_ln61_reg_2305;
        else 
            ap_phi_mux_ii_1_phi_fu_455_p4 <= ii_1_reg_451;
        end if; 
    end process;


    ap_phi_mux_ii_phi_fu_443_p4_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln55_reg_2292, ii_reg_439, add_ln55_reg_2296)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_ii_phi_fu_443_p4 <= add_ln55_reg_2296;
        else 
            ap_phi_mux_ii_phi_fu_443_p4 <= ii_reg_439;
        end if; 
    end process;


    ap_phi_mux_insert_column_idx_phi_fu_500_p4_assign_proc : process(insert_column_idx_reg_496, ap_CS_fsm_pp4_stage0, icmp_ln70_1_reg_2438_pp4_iter1_reg, insert_column_idx_1_reg_2587, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln70_1_reg_2438_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_insert_column_idx_phi_fu_500_p4 <= insert_column_idx_1_reg_2587;
        else 
            ap_phi_mux_insert_column_idx_phi_fu_500_p4 <= insert_column_idx_reg_496;
        end if; 
    end process;


    ap_phi_mux_insert_idx_phi_fu_511_p4_assign_proc : process(insert_idx_reg_507, ap_CS_fsm_pp4_stage0, icmp_ln70_1_reg_2438_pp4_iter1_reg, insert_idx_1_reg_2582, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln70_1_reg_2438_pp4_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_insert_idx_phi_fu_511_p4 <= insert_idx_1_reg_2582;
        else 
            ap_phi_mux_insert_idx_phi_fu_511_p4 <= insert_idx_reg_507;
        end if; 
    end process;


    ap_phi_mux_j_phi_fu_476_p4_assign_proc : process(j_reg_472, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, j_2_reg_2433, icmp_ln70_1_reg_2438, ap_block_pp4_stage0)
    begin
        if (((icmp_ln70_1_reg_2438 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_j_phi_fu_476_p4 <= j_2_reg_2433;
        else 
            ap_phi_mux_j_phi_fu_476_p4 <= j_reg_472;
        end if; 
    end process;


    ap_phi_mux_top_idx_1_phi_fu_488_p4_assign_proc : process(top_idx_1_reg_484, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, window_line_idx_reg_2428, icmp_ln70_1_reg_2438, ap_block_pp4_stage0)
    begin
        if (((icmp_ln70_1_reg_2438 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            ap_phi_mux_top_idx_1_phi_fu_488_p4 <= window_line_idx_reg_2428;
        else 
            ap_phi_mux_top_idx_1_phi_fu_488_p4 <= top_idx_1_reg_484;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_750_p2 <= std_logic_vector(shift_right(signed(select_ln570_reg_2236),to_integer(unsigned('0' & zext_ln586_fu_746_p1(31-1 downto 0)))));

    coefficient_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, coefficient_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            coefficient_blk_n <= coefficient_empty_n;
        else 
            coefficient_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    coefficient_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, coefficient_empty_n, img_width_empty_n, elements_loc_empty_n, elements_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            coefficient_read <= ap_const_logic_1;
        else 
            coefficient_read <= ap_const_logic_0;
        end if; 
    end process;


    elements_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, elements_loc_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            elements_loc_blk_n <= elements_loc_empty_n;
        else 
            elements_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    elements_loc_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, elements_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            elements_loc_out_blk_n <= elements_loc_out_full_n;
        else 
            elements_loc_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    elements_loc_out_din <= elements_loc_dout;

    elements_loc_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, coefficient_empty_n, img_width_empty_n, elements_loc_empty_n, elements_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            elements_loc_out_write <= ap_const_logic_1;
        else 
            elements_loc_out_write <= ap_const_logic_0;
        end if; 
    end process;


    elements_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, coefficient_empty_n, img_width_empty_n, elements_loc_empty_n, elements_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            elements_loc_read <= ap_const_logic_1;
        else 
            elements_loc_read <= ap_const_logic_0;
        end if; 
    end process;


    gmem3_blk_n_AR_assign_proc : process(m_axi_gmem3_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem3_blk_n_AR <= m_axi_gmem3_ARREADY;
        else 
            gmem3_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem3_blk_n_R_assign_proc : process(m_axi_gmem3_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            gmem3_blk_n_R <= m_axi_gmem3_RVALID;
        else 
            gmem3_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1944_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1944_ce <= ap_const_logic_1;
        else 
            grp_fu_1944_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1944_p0 <= grp_fu_1944_p00(8 - 1 downto 0);
    grp_fu_1944_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_19_fu_1343_p1),16));

    grp_fu_1950_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1950_ce <= ap_const_logic_1;
        else 
            grp_fu_1950_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1950_p1 <= grp_fu_1950_p10(8 - 1 downto 0);
    grp_fu_1950_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_5_fu_1347_p4),16));

    grp_fu_1956_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1956_ce <= ap_const_logic_1;
        else 
            grp_fu_1956_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1956_p1 <= grp_fu_1956_p10(8 - 1 downto 0);
    grp_fu_1956_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1375_p4),16));

    grp_fu_1962_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1962_ce <= ap_const_logic_1;
        else 
            grp_fu_1962_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1962_p0 <= grp_fu_1962_p00(8 - 1 downto 0);
    grp_fu_1962_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_4_fu_1468_p1),16));

    grp_fu_1968_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1968_ce <= ap_const_logic_1;
        else 
            grp_fu_1968_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1968_p1 <= grp_fu_1968_p10(8 - 1 downto 0);
    grp_fu_1968_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_2_fu_1472_p4),16));

    grp_fu_1974_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1974_ce <= ap_const_logic_1;
        else 
            grp_fu_1974_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1974_p1 <= grp_fu_1974_p10(8 - 1 downto 0);
    grp_fu_1974_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1507_p4),16));

    grp_fu_1980_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1980_ce <= ap_const_logic_1;
        else 
            grp_fu_1980_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1980_p0 <= grp_fu_1980_p00(8 - 1 downto 0);
    grp_fu_1980_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_6_reg_2504),16));

    grp_fu_1988_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1988_ce <= ap_const_logic_1;
        else 
            grp_fu_1988_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1988_p1 <= grp_fu_1988_p10(8 - 1 downto 0);
    grp_fu_1988_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_4_reg_2509),16));

    grp_fu_1996_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_1996_ce <= ap_const_logic_1;
        else 
            grp_fu_1996_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1996_p1 <= grp_fu_1996_p10(8 - 1 downto 0);
    grp_fu_1996_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_reg_2520),16));

    grp_fu_2004_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2004_ce <= ap_const_logic_1;
        else 
            grp_fu_2004_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2004_p0 <= grp_fu_2004_p00(8 - 1 downto 0);
    grp_fu_2004_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_11_fu_1580_p1),16));

    grp_fu_2010_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2010_ce <= ap_const_logic_1;
        else 
            grp_fu_2010_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2010_p0 <= grp_fu_2010_p00(8 - 1 downto 0);
    grp_fu_2010_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_8_fu_1584_p4),16));

    grp_fu_2016_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2016_ce <= ap_const_logic_1;
        else 
            grp_fu_2016_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2016_p0 <= grp_fu_2016_p00(8 - 1 downto 0);
    grp_fu_2016_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1612_p4),16));

    grp_fu_2022_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2022_ce <= ap_const_logic_1;
        else 
            grp_fu_2022_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2022_p0 <= grp_fu_2022_p00(8 - 1 downto 0);
    grp_fu_2022_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_17_fu_1637_p1),16));

    grp_fu_2028_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2028_ce <= ap_const_logic_1;
        else 
            grp_fu_2028_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2028_p0 <= grp_fu_2028_p00(8 - 1 downto 0);
    grp_fu_2028_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_3_fu_1641_p4),16));

    grp_fu_2034_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2034_ce <= ap_const_logic_1;
        else 
            grp_fu_2034_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2034_p0 <= grp_fu_2034_p00(8 - 1 downto 0);
    grp_fu_2034_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1669_p4),16));

    grp_fu_2040_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2040_ce <= ap_const_logic_1;
        else 
            grp_fu_2040_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2040_p0 <= grp_fu_2040_p00(8 - 1 downto 0);
    grp_fu_2040_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_2_reg_2592),16));

    grp_fu_2048_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2048_ce <= ap_const_logic_1;
        else 
            grp_fu_2048_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2048_p1 <= grp_fu_2048_p10(8 - 1 downto 0);
    grp_fu_2048_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_2597),16));

    grp_fu_2056_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2056_ce <= ap_const_logic_1;
        else 
            grp_fu_2056_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2056_p1 <= grp_fu_2056_p10(8 - 1 downto 0);
    grp_fu_2056_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_2609),16));

    grp_fu_2064_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2064_ce <= ap_const_logic_1;
        else 
            grp_fu_2064_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2064_p0 <= grp_fu_2064_p00(8 - 1 downto 0);
    grp_fu_2064_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_9_reg_2658),16));

    grp_fu_2072_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2072_ce <= ap_const_logic_1;
        else 
            grp_fu_2072_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2072_p0 <= grp_fu_2072_p00(8 - 1 downto 0);
    grp_fu_2072_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_6_reg_2663),16));

    grp_fu_2080_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2080_ce <= ap_const_logic_1;
        else 
            grp_fu_2080_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2080_p0 <= grp_fu_2080_p00(8 - 1 downto 0);
    grp_fu_2080_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_13_reg_2530),16));

    grp_fu_2088_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2088_ce <= ap_const_logic_1;
        else 
            grp_fu_2088_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2088_p0 <= grp_fu_2088_p00(8 - 1 downto 0);
    grp_fu_2088_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_s_reg_2535),16));

    grp_fu_2096_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2096_ce <= ap_const_logic_1;
        else 
            grp_fu_2096_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2096_p0 <= grp_fu_2096_p00(8 - 1 downto 0);
    grp_fu_2096_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_reg_2540),16));

    grp_fu_2104_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2104_ce <= ap_const_logic_1;
        else 
            grp_fu_2104_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2104_p0 <= grp_fu_2104_p00(8 - 1 downto 0);
    grp_fu_2104_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln75_15_reg_2545),16));

    grp_fu_2112_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2112_ce <= ap_const_logic_1;
        else 
            grp_fu_2112_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2112_p0 <= grp_fu_2112_p00(8 - 1 downto 0);
    grp_fu_2112_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln75_1_reg_2550),16));

    grp_fu_2120_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2120_ce <= ap_const_logic_1;
        else 
            grp_fu_2120_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2120_p0 <= grp_fu_2120_p00(8 - 1 downto 0);
    grp_fu_2120_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_2555),16));

    grp_fu_2128_ce_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            grp_fu_2128_ce <= ap_const_logic_1;
        else 
            grp_fu_2128_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_2128_p0 <= grp_fu_2128_p00(8 - 1 downto 0);
    grp_fu_2128_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_reg_2668),16));

    grp_fu_519_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_519_ce <= ap_const_logic_1;
        else 
            grp_fu_519_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_519_p0 <= gmem3_addr_read_reg_2166;

    grp_fu_555_p4_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, trunc_ln75_7_reg_2421, trunc_ln75_7_reg_2421_pp4_iter1_reg, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            grp_fu_555_p4 <= trunc_ln75_7_reg_2421_pp4_iter1_reg;
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            grp_fu_555_p4 <= trunc_ln75_7_reg_2421;
        else 
            grp_fu_555_p4 <= "XX";
        end if; 
    end process;

    i_1_cast_i_i_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_427),64));
    icmp_ln42_fu_597_p2 <= "1" when (ap_phi_mux_i_phi_fu_419_p4 = ap_const_lv4_9) else "0";
    icmp_ln48_1_fu_940_p2 <= "1" when (ap_phi_mux_i_1_phi_fu_431_p4 = trunc_ln48_reg_2277) else "0";
    icmp_ln48_fu_932_p2 <= "1" when (signed(img_width_read_reg_2135) > signed(ap_const_lv32_0)) else "0";
    icmp_ln55_fu_956_p2 <= "1" when (ap_phi_mux_ii_phi_fu_443_p4 = trunc_ln48_reg_2277) else "0";
    icmp_ln571_fu_646_p2 <= "1" when (trunc_ln555_reg_2177 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_667_p2 <= "1" when (signed(tmp_19_fu_657_p4) > signed(ap_const_lv9_0)) else "0";
    icmp_ln582_fu_690_p2 <= "1" when (F2_reg_2204 = ap_const_lv12_7) else "0";
    icmp_ln585_fu_733_p2 <= "1" when (unsigned(sh_amt_reg_2218) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_738_p2 <= "1" when (tmp_20_reg_2231 = ap_const_lv8_0) else "0";
    icmp_ln61_fu_972_p2 <= "1" when (ap_phi_mux_ii_1_phi_fu_455_p4 = ap_const_lv2_3) else "0";
    icmp_ln70_1_fu_1135_p2 <= "1" when (add_ln35_reg_2320 = ap_const_lv32_0) else "0";
    icmp_ln70_fu_989_p2 <= "1" when (elements_loc_read_reg_2145 = ap_const_lv32_0) else "0";
    icmp_ln75_1_fu_1053_p2 <= "1" when (signed(add_ln74_reg_2326) < signed(sext_ln70_reg_2314)) else "0";
    icmp_ln75_2_fu_1069_p2 <= "1" when (signed(add_ln74_1_reg_2338) > signed(ap_const_lv33_0)) else "0";
    icmp_ln75_3_fu_1074_p2 <= "1" when (signed(j_reg_472) < signed(img_width_read_reg_2135)) else "0";
    icmp_ln75_4_fu_1085_p2 <= "1" when (signed(add_ln74_2_reg_2345) > signed(ap_const_lv33_0)) else "0";
    icmp_ln75_5_fu_1090_p2 <= "1" when (signed(add_ln74_1_reg_2338) < signed(sext_ln70_reg_2314)) else "0";
    icmp_ln75_fu_1047_p2 <= "1" when (signed(j_reg_472) > signed(ap_const_lv32_0)) else "0";
    icmp_ln81_1_fu_1147_p2 <= "1" when (select_ln81_reg_2416 = ap_const_lv32_2) else "0";
    icmp_ln81_fu_1100_p2 <= "1" when (add_ln81_reg_2350 = ap_const_lv32_3) else "0";
    icmp_ln851_1_fu_1877_p2 <= "1" when (trunc_ln851_1_reg_2969 = ap_const_lv7_0) else "0";
    icmp_ln851_2_fu_1908_p2 <= "1" when (trunc_ln851_2_reg_2981 = ap_const_lv7_0) else "0";
    icmp_ln851_fu_1846_p2 <= "1" when (trunc_ln851_reg_2957 = ap_const_lv7_0) else "0";
    icmp_ln87_fu_1116_p2 <= "1" when (signed(j_1_reg_2356) < signed(img_width_read_reg_2135)) else "0";
    icmp_ln93_fu_1389_p2 <= "1" when (signed(add_ln92_reg_2487) < signed(img_width_read_reg_2135)) else "0";
    icmp_ln95_fu_1393_p2 <= "1" when (add_ln95_reg_2493 = ap_const_lv32_3) else "0";
    ii_1_cast_i_i_fu_984_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_1_reg_451_pp3_iter1_reg),64));
    ii_cast_i_i_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_439_pp2_iter1_reg),64));

    img_width_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, img_width_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_blk_n <= img_width_empty_n;
        else 
            img_width_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_width_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, coefficient_empty_n, img_width_empty_n, elements_loc_empty_n, elements_loc_out_full_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (elements_loc_out_full_n = ap_const_logic_0) or (elements_loc_empty_n = ap_const_logic_0) or (img_width_empty_n = ap_const_logic_0) or (coefficient_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            img_width_read <= ap_const_logic_1;
        else 
            img_width_read <= ap_const_logic_0;
        end if; 
    end process;

    insert_column_idx_1_fu_1413_p3 <= 
        add_ln92_reg_2487 when (icmp_ln93_fu_1389_p2(0) = '1') else 
        ap_const_lv32_0;
    insert_idx_1_fu_1405_p3 <= 
        insert_idx_reg_507 when (icmp_ln93_fu_1389_p2(0) = '1') else 
        select_ln95_fu_1398_p3;
    ireg_fu_613_p1 <= grp_fu_519_p1;
    j_1_fu_1035_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(ap_phi_mux_j_phi_fu_476_p4));
    j_2_fu_1128_p3 <= 
        j_1_reg_2356 when (icmp_ln87_fu_1116_p2(0) = '1') else 
        ap_const_lv32_0;
        j_cast_i_i_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_phi_mux_j_phi_fu_476_p4),33));

    lshr_ln75_2_fu_1472_p4 <= select_ln75_1_fu_1461_p3(15 downto 8);
    lshr_ln75_3_fu_1641_p4 <= select_ln75_7_fu_1630_p3(15 downto 8);
    lshr_ln75_5_fu_1347_p4 <= select_ln75_8_fu_1336_p3(15 downto 8);
    lshr_ln75_8_fu_1584_p4 <= select_ln75_4_fu_1573_p3(15 downto 8);
    m_axi_gmem3_ARADDR <= gmem3_addr_reg_2151;
    m_axi_gmem3_ARBURST <= ap_const_lv2_0;
    m_axi_gmem3_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem3_ARID <= ap_const_lv1_0;
    m_axi_gmem3_ARLEN <= ap_const_lv32_9;
    m_axi_gmem3_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem3_ARPROT <= ap_const_lv3_0;
    m_axi_gmem3_ARQOS <= ap_const_lv4_0;
    m_axi_gmem3_ARREGION <= ap_const_lv4_0;
    m_axi_gmem3_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem3_ARUSER <= ap_const_lv1_0;

    m_axi_gmem3_ARVALID_assign_proc : process(m_axi_gmem3_ARREADY, ap_CS_fsm_state2)
    begin
        if (((m_axi_gmem3_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem3_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem3_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_AWADDR <= ap_const_lv64_0;
    m_axi_gmem3_AWBURST <= ap_const_lv2_0;
    m_axi_gmem3_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem3_AWID <= ap_const_lv1_0;
    m_axi_gmem3_AWLEN <= ap_const_lv32_0;
    m_axi_gmem3_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem3_AWPROT <= ap_const_lv3_0;
    m_axi_gmem3_AWQOS <= ap_const_lv4_0;
    m_axi_gmem3_AWREGION <= ap_const_lv4_0;
    m_axi_gmem3_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem3_AWUSER <= ap_const_lv1_0;
    m_axi_gmem3_AWVALID <= ap_const_logic_0;
    m_axi_gmem3_BREADY <= ap_const_logic_0;

    m_axi_gmem3_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_gmem3_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem3_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem3_WDATA <= ap_const_lv32_0;
    m_axi_gmem3_WID <= ap_const_lv1_0;
    m_axi_gmem3_WLAST <= ap_const_logic_0;
    m_axi_gmem3_WSTRB <= ap_const_lv4_0;
    m_axi_gmem3_WUSER <= ap_const_lv1_0;
    m_axi_gmem3_WVALID <= ap_const_logic_0;
    man_V_1_fu_716_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln569_fu_712_p1));
    or_ln581_fu_848_p2 <= (or_ln582_reg_2258 or icmp_ln581_reg_2211_pp0_iter8_reg);
    or_ln582_fu_776_p2 <= (icmp_ln582_reg_2225_pp0_iter7_reg or icmp_ln571_reg_2197_pp0_iter7_reg);
    p_Result_1_fu_1870_p3 <= add_ln703_15_reg_2940(15 downto 15);
    p_Result_2_fu_1901_p3 <= add_ln703_23_reg_2945(15 downto 15);
    p_Result_4_fu_705_p3 <= (ap_const_lv1_1 & trunc_ln565_reg_2192_pp0_iter6_reg);
    p_Result_s_fu_1839_p3 <= add_ln703_7_reg_2935(15 downto 15);

    read_stream_blk_n_assign_proc : process(read_stream_empty_n, ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, icmp_ln55_reg_2292, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0, icmp_ln61_reg_2301, ap_enable_reg_pp4_iter0)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1)) or ((icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0)))) then 
            read_stream_blk_n <= read_stream_empty_n;
        else 
            read_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    read_stream_read_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, icmp_ln55_reg_2292, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, icmp_ln61_reg_2301, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0_11001, ap_block_pp3_stage0_11001, ap_block_pp4_stage1_11001)
    begin
        if ((((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)) or ((icmp_ln61_reg_2301 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln55_reg_2292 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)))) then 
            read_stream_read <= ap_const_logic_1;
        else 
            read_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    select_ln570_fu_722_p3 <= 
        man_V_1_fu_716_p2 when (p_Result_3_reg_2182_pp0_iter6_reg(0) = '1') else 
        zext_ln569_fu_712_p1;
    select_ln571_fu_871_p3 <= 
        ap_const_lv16_0 when (icmp_ln571_reg_2197_pp0_iter8_reg(0) = '1') else 
        select_ln603_fu_863_p3;
    select_ln582_fu_769_p3 <= 
        trunc_ln583_reg_2241 when (and_ln582_fu_764_p2(0) = '1') else 
        ap_const_lv16_0;
    select_ln585_1_fu_841_p3 <= 
        select_ln588_fu_814_p3 when (and_ln585_1_fu_836_p2(0) = '1') else 
        select_ln585_reg_2268;
    select_ln585_fu_796_p3 <= 
        trunc_ln586_1_fu_755_p1 when (and_ln585_fu_791_p2(0) = '1') else 
        select_ln582_fu_769_p3;
    select_ln588_fu_814_p3 <= 
        ap_const_lv16_FFFF when (tmp_21_fu_807_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln603_fu_863_p3 <= 
        shl_ln604_fu_826_p2 when (and_ln603_fu_858_p2(0) = '1') else 
        select_ln585_1_fu_841_p3;
    select_ln703_1_fu_1490_p3 <= 
        ap_const_lv16_FFFF when (and_ln75_1_reg_2385_pp4_iter1_reg(0) = '1') else 
        ap_const_lv16_0;
    select_ln703_2_fu_1225_p3 <= 
        ap_const_lv16_FFFF when (and_ln75_2_reg_2393(0) = '1') else 
        ap_const_lv16_0;
    select_ln703_fu_1440_p3 <= 
        ap_const_lv16_FFFF when (and_ln75_reg_2362_pp4_iter1_reg(0) = '1') else 
        ap_const_lv16_0;
    select_ln75_1_fu_1461_p3 <= 
        trunc_ln75_3_fu_1457_p1 when (and_ln75_1_reg_2385_pp4_iter1_reg(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_2_fu_1204_p3 <= 
        trunc_ln75_5_fu_1200_p1 when (and_ln75_2_reg_2393(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_3_fu_1539_p3 <= 
        trunc_ln75_8_reg_2525 when (and_ln75_reg_2362_pp4_iter1_reg(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_4_fu_1573_p3 <= 
        trunc_ln75_10_fu_1569_p1 when (and_ln75_1_reg_2385_pp4_iter1_reg(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_5_fu_1258_p3 <= 
        trunc_ln75_12_fu_1254_p1 when (and_ln75_2_reg_2393(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_6_fu_1293_p3 <= 
        trunc_ln75_14_fu_1289_p1 when (and_ln75_reg_2362(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_7_fu_1630_p3 <= 
        trunc_ln75_16_fu_1626_p1 when (and_ln75_1_reg_2385_pp4_iter1_reg(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_8_fu_1336_p3 <= 
        trunc_ln75_18_fu_1332_p1 when (and_ln75_2_reg_2393(0) = '1') else 
        ap_const_lv24_0;
    select_ln75_fu_1420_p3 <= 
        trunc_ln75_1_reg_2499 when (and_ln75_reg_2362_pp4_iter1_reg(0) = '1') else 
        ap_const_lv24_0;
    select_ln81_1_fu_1157_p3 <= 
        ap_const_lv2_0 when (icmp_ln81_1_fu_1147_p2(0) = '1') else 
        add_ln81_1_fu_1152_p2;
    select_ln81_fu_1105_p3 <= 
        ap_const_lv32_0 when (icmp_ln81_fu_1100_p2(0) = '1') else 
        add_ln81_reg_2350;
    select_ln850_1_fu_1887_p3 <= 
        trunc_ln850_1_reg_2962 when (icmp_ln851_1_fu_1877_p2(0) = '1') else 
        add_ln695_1_fu_1882_p2;
    select_ln850_2_fu_1918_p3 <= 
        trunc_ln850_2_reg_2974 when (icmp_ln851_2_fu_1908_p2(0) = '1') else 
        add_ln695_2_fu_1913_p2;
    select_ln850_3_fu_1863_p3 <= 
        select_ln850_fu_1856_p3 when (p_Result_s_fu_1839_p3(0) = '1') else 
        trunc_ln_reg_2950;
    select_ln850_4_fu_1894_p3 <= 
        select_ln850_1_fu_1887_p3 when (p_Result_1_fu_1870_p3(0) = '1') else 
        trunc_ln850_1_reg_2962;
    select_ln850_5_fu_1925_p3 <= 
        select_ln850_2_fu_1918_p3 when (p_Result_2_fu_1901_p3(0) = '1') else 
        trunc_ln850_2_reg_2974;
    select_ln850_fu_1856_p3 <= 
        trunc_ln_reg_2950 when (icmp_ln851_fu_1846_p2(0) = '1') else 
        add_ln695_fu_1851_p2;
    select_ln95_fu_1398_p3 <= 
        ap_const_lv32_0 when (icmp_ln95_fu_1393_p2(0) = '1') else 
        add_ln95_reg_2493;
        sext_ln42_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_577_p4),64));

        sext_ln581_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_reg_2218_pp0_iter8_reg),31));

    sext_ln581cast_fu_822_p1 <= sext_ln581_fu_804_p1(16 - 1 downto 0);
        sext_ln70_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(img_width_read_reg_2135),33));

    sh_amt_fu_683_p3 <= 
        add_ln581_fu_673_p2 when (icmp_ln581_reg_2211(0) = '1') else 
        sub_ln581_fu_678_p2;
    shl_ln604_fu_826_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_reg_2241_pp0_iter8_reg),to_integer(unsigned('0' & sext_ln581cast_fu_822_p1(16-1 downto 0)))));
    sub_ln581_fu_678_p2 <= std_logic_vector(unsigned(ap_const_lv12_7) - unsigned(F2_reg_2204));
    tmp_10_i_i_fu_1932_p4 <= ((select_ln850_5_reg_2996 & select_ln850_4_reg_2991) & select_ln850_3_reg_2986);
    tmp_12_fu_1612_p4 <= select_ln75_4_fu_1573_p3(23 downto 16);
    tmp_15_fu_1669_p4 <= select_ln75_7_fu_1630_p3(23 downto 16);
    tmp_16_fu_1375_p4 <= select_ln75_8_fu_1336_p3(23 downto 16);
    tmp_19_fu_657_p4 <= F2_fu_651_p2(11 downto 3);
    tmp_21_fu_807_p3 <= gmem3_addr_read_reg_2166_pp0_iter8_reg(31 downto 31);
    tmp_s_fu_1507_p4 <= select_ln75_1_fu_1461_p3(23 downto 16);
    trunc_ln1_fu_577_p4 <= coefficient_dout(63 downto 2);
    trunc_ln48_fu_937_p1 <= img_width_read_reg_2135(31 - 1 downto 0);
    trunc_ln555_fu_617_p1 <= ireg_fu_613_p1(63 - 1 downto 0);
    trunc_ln565_fu_639_p1 <= ireg_fu_613_p1(52 - 1 downto 0);
    trunc_ln583_fu_729_p1 <= select_ln570_fu_722_p3(16 - 1 downto 0);
    trunc_ln586_1_fu_755_p1 <= ashr_ln586_fu_750_p2(16 - 1 downto 0);
    trunc_ln586_fu_743_p1 <= sh_amt_reg_2218_pp0_iter7_reg(6 - 1 downto 0);
    trunc_ln75_10_fu_1569_p1 <= grp_fu_555_p5(24 - 1 downto 0);
    trunc_ln75_11_fu_1580_p1 <= select_ln75_4_fu_1573_p3(8 - 1 downto 0);
    trunc_ln75_12_fu_1254_p1 <= tmp_5_fu_1246_p5(24 - 1 downto 0);
    trunc_ln75_13_fu_1265_p1 <= select_ln75_5_fu_1258_p3(8 - 1 downto 0);
    trunc_ln75_14_fu_1289_p1 <= grp_fu_566_p5(24 - 1 downto 0);
    trunc_ln75_15_fu_1300_p1 <= select_ln75_6_fu_1293_p3(8 - 1 downto 0);
    trunc_ln75_16_fu_1626_p1 <= grp_fu_566_p5(24 - 1 downto 0);
    trunc_ln75_17_fu_1637_p1 <= select_ln75_7_fu_1630_p3(8 - 1 downto 0);
    trunc_ln75_18_fu_1332_p1 <= tmp_8_fu_1324_p5(24 - 1 downto 0);
    trunc_ln75_19_fu_1343_p1 <= select_ln75_8_fu_1336_p3(8 - 1 downto 0);
    trunc_ln75_1_fu_1188_p1 <= grp_fu_544_p5(24 - 1 downto 0);
    trunc_ln75_2_fu_1426_p1 <= select_ln75_fu_1420_p3(8 - 1 downto 0);
    trunc_ln75_3_fu_1457_p1 <= grp_fu_544_p5(24 - 1 downto 0);
    trunc_ln75_4_fu_1468_p1 <= select_ln75_1_fu_1461_p3(8 - 1 downto 0);
    trunc_ln75_5_fu_1200_p1 <= tmp_2_fu_1192_p5(24 - 1 downto 0);
    trunc_ln75_6_fu_1211_p1 <= select_ln75_2_fu_1204_p3(8 - 1 downto 0);
    trunc_ln75_7_fu_1112_p1 <= select_ln81_fu_1105_p3(2 - 1 downto 0);
    trunc_ln75_8_fu_1242_p1 <= grp_fu_555_p5(24 - 1 downto 0);
    trunc_ln75_9_fu_1545_p1 <= select_ln75_3_fu_1539_p3(8 - 1 downto 0);
    trunc_ln75_fu_1013_p1 <= ap_phi_mux_top_idx_1_phi_fu_488_p4(2 - 1 downto 0);
    trunc_ln851_1_fu_1821_p1 <= add_ln703_15_fu_1777_p2(7 - 1 downto 0);
    trunc_ln851_2_fu_1835_p1 <= add_ln703_23_fu_1791_p2(7 - 1 downto 0);
    trunc_ln851_fu_1807_p1 <= add_ln703_7_fu_1763_p2(7 - 1 downto 0);
    trunc_ln92_fu_1172_p1 <= ap_phi_mux_insert_idx_phi_fu_511_p4(2 - 1 downto 0);
    window_line_idx_fu_1120_p3 <= 
        top_idx_1_reg_484 when (icmp_ln87_fu_1116_p2(0) = '1') else 
        select_ln81_fu_1105_p3;

    window_mem_0_address0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp4_stage0, i_1_cast_i_i_fu_951_p1, zext_ln75_fu_1041_p1, zext_ln92_fu_1165_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_0_address0 <= zext_ln92_fu_1165_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            window_mem_0_address0 <= zext_ln75_fu_1041_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            window_mem_0_address0 <= i_1_cast_i_i_fu_951_p1(11 - 1 downto 0);
        else 
            window_mem_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    window_mem_0_address1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, zext_ln75_1_fu_1063_p1, zext_ln72_fu_1140_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_0_address1 <= zext_ln72_fu_1140_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            window_mem_0_address1 <= zext_ln75_1_fu_1063_p1(11 - 1 downto 0);
        else 
            window_mem_0_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    window_mem_0_ce0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            window_mem_0_ce0 <= ap_const_logic_1;
        else 
            window_mem_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_0_ce1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            window_mem_0_ce1 <= ap_const_logic_1;
        else 
            window_mem_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_0_d0_assign_proc : process(reg_522, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_0_d0 <= reg_522;
        elsif (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            window_mem_0_d0 <= ap_const_lv32_0;
        else 
            window_mem_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    window_mem_0_we0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, icmp_ln48_1_reg_2283, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, trunc_ln92_fu_1172_p1)
    begin
        if ((((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (icmp_ln48_1_reg_2283 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (trunc_ln92_fu_1172_p1 = ap_const_lv2_0)))) then 
            window_mem_0_we0 <= ap_const_logic_1;
        else 
            window_mem_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_1_address0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_block_pp2_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp2_iter2, ap_block_pp4_stage0, ii_cast_i_i_fu_967_p1, zext_ln75_fu_1041_p1, zext_ln92_fu_1165_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_1_address0 <= zext_ln92_fu_1165_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            window_mem_1_address0 <= zext_ln75_fu_1041_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            window_mem_1_address0 <= ii_cast_i_i_fu_967_p1(11 - 1 downto 0);
        else 
            window_mem_1_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    window_mem_1_address1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, zext_ln75_1_fu_1063_p1, zext_ln72_fu_1140_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_1_address1 <= zext_ln72_fu_1140_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            window_mem_1_address1 <= zext_ln75_1_fu_1063_p1(11 - 1 downto 0);
        else 
            window_mem_1_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    window_mem_1_ce0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp2_stage0_11001, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, ap_enable_reg_pp2_iter2)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            window_mem_1_ce0 <= ap_const_logic_1;
        else 
            window_mem_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_1_ce1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            window_mem_1_ce1 <= ap_const_logic_1;
        else 
            window_mem_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_1_we0_assign_proc : process(ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, icmp_ln55_reg_2292_pp2_iter1_reg, ap_enable_reg_pp2_iter2, trunc_ln92_fu_1172_p1)
    begin
        if ((((ap_enable_reg_pp2_iter2 = ap_const_logic_1) and (icmp_ln55_reg_2292_pp2_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (trunc_ln92_fu_1172_p1 = ap_const_lv2_1)))) then 
            window_mem_1_we0 <= ap_const_logic_1;
        else 
            window_mem_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_2_address0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_block_pp3_stage0, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0, ii_1_cast_i_i_fu_984_p1, zext_ln75_fu_1041_p1, zext_ln92_fu_1165_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_2_address0 <= zext_ln92_fu_1165_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            window_mem_2_address0 <= zext_ln75_fu_1041_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            window_mem_2_address0 <= ii_1_cast_i_i_fu_984_p1(11 - 1 downto 0);
        else 
            window_mem_2_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    window_mem_2_address1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_block_pp4_stage1, ap_enable_reg_pp4_iter0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, zext_ln75_1_fu_1063_p1, zext_ln72_fu_1140_p1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            window_mem_2_address1 <= zext_ln72_fu_1140_p1(11 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1))) then 
            window_mem_2_address1 <= zext_ln75_1_fu_1063_p1(11 - 1 downto 0);
        else 
            window_mem_2_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    window_mem_2_ce0_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp3_stage0_11001, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, ap_enable_reg_pp3_iter2)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            window_mem_2_ce0 <= ap_const_logic_1;
        else 
            window_mem_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_2_ce1_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter0, ap_block_pp4_stage1_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001)
    begin
        if ((((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001)))) then 
            window_mem_2_ce1 <= ap_const_logic_1;
        else 
            window_mem_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    window_mem_2_we0_assign_proc : process(ap_block_pp3_stage0_11001, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0_11001, icmp_ln61_reg_2301_pp3_iter1_reg, ap_enable_reg_pp3_iter2, trunc_ln92_fu_1172_p1)
    begin
        if ((((ap_enable_reg_pp3_iter2 = ap_const_logic_1) and (icmp_ln61_reg_2301_pp3_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_11001)) or (not((trunc_ln92_fu_1172_p1 = ap_const_lv2_1)) and not((trunc_ln92_fu_1172_p1 = ap_const_lv2_0)) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            window_mem_2_we0 <= ap_const_logic_1;
        else 
            window_mem_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    write_stream_blk_n_assign_proc : process(write_stream_full_n, ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter5, ap_block_pp4_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then 
            write_stream_blk_n <= write_stream_full_n;
        else 
            write_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    write_stream_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_i_i_fu_1932_p4),32));

    write_stream_write_assign_proc : process(ap_CS_fsm_pp4_stage1, ap_enable_reg_pp4_iter5, ap_block_pp4_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage1) and (ap_const_boolean_0 = ap_block_pp4_stage1_11001) and (ap_enable_reg_pp4_iter5 = ap_const_logic_1))) then 
            write_stream_write <= ap_const_logic_1;
        else 
            write_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln571_fu_759_p2 <= (icmp_ln571_reg_2197_pp0_iter7_reg xor ap_const_lv1_1);
    xor_ln581_fu_852_p2 <= (or_ln581_fu_848_p2 xor ap_const_lv1_1);
    xor_ln582_fu_780_p2 <= (or_ln582_fu_776_p2 xor ap_const_lv1_1);
    xor_ln585_fu_831_p2 <= (icmp_ln585_reg_2247_pp0_iter8_reg xor ap_const_lv1_1);
    zext_ln455_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_reg_2187),12));
    zext_ln569_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_fu_705_p3),54));
    zext_ln586_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln586_fu_743_p1),54));
    zext_ln72_fu_1140_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_472),64));
    zext_ln75_1_fu_1063_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_1_reg_2338),64));
    zext_ln75_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln74_reg_2326),64));
    zext_ln92_fu_1165_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_insert_column_idx_phi_fu_500_p4),64));
end behav;
