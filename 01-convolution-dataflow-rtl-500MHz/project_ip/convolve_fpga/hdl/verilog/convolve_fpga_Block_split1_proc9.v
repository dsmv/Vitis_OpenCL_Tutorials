// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolve_fpga_Block_split1_proc9 (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        img_width,
        img_height,
        inFrame,
        outFrame,
        coefficient,
        img_width_out_din,
        img_width_out_full_n,
        img_width_out_write,
        elements_out_out_din,
        elements_out_out_full_n,
        elements_out_out_write,
        inFrame_out_din,
        inFrame_out_full_n,
        inFrame_out_write,
        outFrame_out_din,
        outFrame_out_full_n,
        outFrame_out_write,
        coefficient_out_din,
        coefficient_out_full_n,
        coefficient_out_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] img_width;
input  [31:0] img_height;
input  [63:0] inFrame;
input  [63:0] outFrame;
input  [63:0] coefficient;
output  [31:0] img_width_out_din;
input   img_width_out_full_n;
output   img_width_out_write;
output  [31:0] elements_out_out_din;
input   elements_out_out_full_n;
output   elements_out_out_write;
output  [63:0] inFrame_out_din;
input   inFrame_out_full_n;
output   inFrame_out_write;
output  [63:0] outFrame_out_din;
input   outFrame_out_full_n;
output   outFrame_out_write;
output  [63:0] coefficient_out_din;
input   coefficient_out_full_n;
output   coefficient_out_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg img_width_out_write;
reg elements_out_out_write;
reg inFrame_out_write;
reg outFrame_out_write;
reg coefficient_out_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    img_width_out_blk_n;
wire    ap_CS_fsm_state8;
reg    elements_out_out_blk_n;
reg    inFrame_out_blk_n;
reg    outFrame_out_blk_n;
reg    coefficient_out_blk_n;
reg    ap_block_state1;
wire   [31:0] grp_fu_107_p2;
reg   [31:0] elements_reg_139;
wire    ap_CS_fsm_state7;
reg    ap_block_state8;
reg    grp_fu_107_ce;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
end

convolve_fpga_mul_32s_32s_32_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_7_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(img_height),
    .din1(img_width),
    .ce(grp_fu_107_ce),
    .dout(grp_fu_107_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        elements_reg_139 <= grp_fu_107_p2;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (real_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        coefficient_out_blk_n = coefficient_out_full_n;
    end else begin
        coefficient_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        coefficient_out_write = 1'b1;
    end else begin
        coefficient_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        elements_out_out_blk_n = elements_out_out_full_n;
    end else begin
        elements_out_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        elements_out_out_write = 1'b1;
    end else begin
        elements_out_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'b1 == ap_CS_fsm_state1) & ((ap_done_reg == 1'b1) | (real_start == 1'b0))))) begin
        grp_fu_107_ce = 1'b0;
    end else begin
        grp_fu_107_ce = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        img_width_out_blk_n = img_width_out_full_n;
    end else begin
        img_width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        img_width_out_write = 1'b1;
    end else begin
        img_width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        inFrame_out_blk_n = inFrame_out_full_n;
    end else begin
        inFrame_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        inFrame_out_write = 1'b1;
    end else begin
        inFrame_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        outFrame_out_blk_n = outFrame_out_full_n;
    end else begin
        outFrame_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
        outFrame_out_write = 1'b1;
    end else begin
        outFrame_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (real_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            if ((~((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (real_start == 1'b0));
end

always @ (*) begin
    ap_block_state8 = ((coefficient_out_full_n == 1'b0) | (outFrame_out_full_n == 1'b0) | (inFrame_out_full_n == 1'b0) | (elements_out_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0));
end

assign ap_ready = internal_ap_ready;

assign coefficient_out_din = coefficient;

assign elements_out_out_din = elements_reg_139;

assign img_width_out_din = img_width;

assign inFrame_out_din = inFrame;

assign outFrame_out_din = outFrame;

assign start_out = real_start;

endmodule //convolve_fpga_Block_split1_proc9
