// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolve_fpga_read_dataflow_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        read_stream_din,
        read_stream_full_n,
        read_stream_write,
        m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY,
        m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY,
        m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST,
        m_axi_gmem1_WID,
        m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST,
        m_axi_gmem1_RID,
        m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID,
        m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP,
        m_axi_gmem1_BID,
        m_axi_gmem1_BUSER,
        inFrame_dout,
        inFrame_empty_n,
        inFrame_read,
        img_width_dout,
        img_width_empty_n,
        img_width_read,
        elements_loc_dout,
        elements_loc_empty_n,
        elements_loc_read,
        img_width_out_din,
        img_width_out_full_n,
        img_width_out_write,
        elements_loc_out_din,
        elements_loc_out_full_n,
        elements_loc_out_write
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_pp0_stage0 = 14'd512;
parameter    ap_ST_fsm_state13 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] read_stream_din;
input   read_stream_full_n;
output   read_stream_write;
output   m_axi_gmem1_AWVALID;
input   m_axi_gmem1_AWREADY;
output  [63:0] m_axi_gmem1_AWADDR;
output  [0:0] m_axi_gmem1_AWID;
output  [31:0] m_axi_gmem1_AWLEN;
output  [2:0] m_axi_gmem1_AWSIZE;
output  [1:0] m_axi_gmem1_AWBURST;
output  [1:0] m_axi_gmem1_AWLOCK;
output  [3:0] m_axi_gmem1_AWCACHE;
output  [2:0] m_axi_gmem1_AWPROT;
output  [3:0] m_axi_gmem1_AWQOS;
output  [3:0] m_axi_gmem1_AWREGION;
output  [0:0] m_axi_gmem1_AWUSER;
output   m_axi_gmem1_WVALID;
input   m_axi_gmem1_WREADY;
output  [31:0] m_axi_gmem1_WDATA;
output  [3:0] m_axi_gmem1_WSTRB;
output   m_axi_gmem1_WLAST;
output  [0:0] m_axi_gmem1_WID;
output  [0:0] m_axi_gmem1_WUSER;
output   m_axi_gmem1_ARVALID;
input   m_axi_gmem1_ARREADY;
output  [63:0] m_axi_gmem1_ARADDR;
output  [0:0] m_axi_gmem1_ARID;
output  [31:0] m_axi_gmem1_ARLEN;
output  [2:0] m_axi_gmem1_ARSIZE;
output  [1:0] m_axi_gmem1_ARBURST;
output  [1:0] m_axi_gmem1_ARLOCK;
output  [3:0] m_axi_gmem1_ARCACHE;
output  [2:0] m_axi_gmem1_ARPROT;
output  [3:0] m_axi_gmem1_ARQOS;
output  [3:0] m_axi_gmem1_ARREGION;
output  [0:0] m_axi_gmem1_ARUSER;
input   m_axi_gmem1_RVALID;
output   m_axi_gmem1_RREADY;
input  [31:0] m_axi_gmem1_RDATA;
input   m_axi_gmem1_RLAST;
input  [0:0] m_axi_gmem1_RID;
input  [0:0] m_axi_gmem1_RUSER;
input  [1:0] m_axi_gmem1_RRESP;
input   m_axi_gmem1_BVALID;
output   m_axi_gmem1_BREADY;
input  [1:0] m_axi_gmem1_BRESP;
input  [0:0] m_axi_gmem1_BID;
input  [0:0] m_axi_gmem1_BUSER;
input  [63:0] inFrame_dout;
input   inFrame_empty_n;
output   inFrame_read;
input  [31:0] img_width_dout;
input   img_width_empty_n;
output   img_width_read;
input  [31:0] elements_loc_dout;
input   elements_loc_empty_n;
output   elements_loc_read;
output  [31:0] img_width_out_din;
input   img_width_out_full_n;
output   img_width_out_write;
output  [31:0] elements_loc_out_din;
input   elements_loc_out_full_n;
output   elements_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[31:0] read_stream_din;
reg read_stream_write;
reg m_axi_gmem1_ARVALID;
reg m_axi_gmem1_RREADY;
reg inFrame_read;
reg img_width_read;
reg elements_loc_read;
reg img_width_out_write;
reg elements_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    read_stream_blk_n;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_state15;
reg    gmem1_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    gmem1_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    inFrame_blk_n;
reg    img_width_blk_n;
reg    elements_loc_blk_n;
reg    img_width_out_blk_n;
reg    elements_loc_out_blk_n;
reg   [31:0] dec8_in_i_i_reg_125;
reg   [63:0] inFrame_read_reg_200;
reg    ap_block_state1;
reg   [31:0] img_width_read_reg_205;
reg   [31:0] elements_loc_read_reg_211;
wire   [0:0] icmp_ln24_fu_143_p2;
wire    ap_CS_fsm_state2;
reg   [63:0] gmem1_addr_reg_222;
wire   [31:0] add_ln21_fu_167_p2;
reg   [31:0] add_ln21_reg_228;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state10_pp0_stage0_iter0;
reg    ap_block_state11_pp0_stage0_iter1;
reg    ap_block_state12_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] a_reg_234;
wire   [0:0] icmp_ln24_1_fu_173_p2;
wire   [31:0] padding_fu_178_p2;
reg   [31:0] padding_reg_243;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln29_fu_183_p2;
wire   [31:0] padding_2_fu_188_p2;
wire    ap_CS_fsm_state9;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_flush_enable;
reg   [31:0] ap_phi_mux_dec8_in_i_i_phi_fu_128_p4;
reg   [31:0] padding_1_reg_134;
wire   [0:0] icmp_ln29_1_fu_194_p2;
wire    ap_CS_fsm_state14;
wire  signed [63:0] sext_ln24_fu_157_p1;
reg    ap_block_pp0_stage0_01001;
wire   [61:0] trunc_ln_fu_148_p4;
wire    ap_CS_fsm_state16;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dec8_in_i_i_reg_125 <= add_ln21_reg_228;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dec8_in_i_i_reg_125 <= elements_loc_read_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        padding_1_reg_134 <= padding_reg_243;
    end else if (((read_stream_full_n == 1'b1) & (icmp_ln29_1_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
        padding_1_reg_134 <= padding_2_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        a_reg_234 <= m_axi_gmem1_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln21_reg_228 <= add_ln21_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_read_reg_211 <= elements_loc_dout;
        img_width_read_reg_205 <= img_width_dout;
        inFrame_read_reg_200 <= inFrame_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln24_fu_143_p2 == 1'd0))) begin
        gmem1_addr_reg_222 <= sext_ln24_fu_157_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        padding_reg_243 <= padding_fu_178_p2;
    end
end

always @ (*) begin
    if (((icmp_ln24_1_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_1_fu_173_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_dec8_in_i_i_phi_fu_128_p4 = add_ln21_reg_228;
    end else begin
        ap_phi_mux_dec8_in_i_i_phi_fu_128_p4 = dec8_in_i_i_reg_125;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_blk_n = elements_loc_empty_n;
    end else begin
        elements_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_out_blk_n = elements_loc_out_full_n;
    end else begin
        elements_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_out_write = 1'b1;
    end else begin
        elements_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_read = 1'b1;
    end else begin
        elements_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem1_blk_n_AR = m_axi_gmem1_ARREADY;
    end else begin
        gmem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem1_blk_n_R = m_axi_gmem1_RVALID;
    end else begin
        gmem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_blk_n = img_width_empty_n;
    end else begin
        img_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_out_blk_n = img_width_out_full_n;
    end else begin
        img_width_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_out_write = 1'b1;
    end else begin
        img_width_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_read = 1'b1;
    end else begin
        img_width_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inFrame_blk_n = inFrame_empty_n;
    end else begin
        inFrame_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        inFrame_read = 1'b1;
    end else begin
        inFrame_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem1_ARVALID = 1'b1;
    end else begin
        m_axi_gmem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem1_RREADY = 1'b1;
    end else begin
        m_axi_gmem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        read_stream_blk_n = read_stream_full_n;
    end else begin
        read_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((read_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        read_stream_din = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        read_stream_din = a_reg_234;
    end else begin
        read_stream_din = 'bx;
    end
end

always @ (*) begin
    if ((((read_stream_full_n == 1'b1) & (1'b1 == ap_CS_fsm_state15)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        read_stream_write = 1'b1;
    end else begin
        read_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln24_fu_143_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem1_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln29_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((read_stream_full_n == 1'b1) & (icmp_ln29_1_fu_194_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else if (((read_stream_full_n == 1'b1) & (icmp_ln29_1_fu_194_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_167_p2 = ($signed(ap_phi_mux_dec8_in_i_i_phi_fu_128_p4) + $signed(32'd4294967295));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((read_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((read_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((read_stream_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((m_axi_gmem1_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((inFrame_empty_n == 1'b0) | (ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (img_width_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0));
end

assign ap_block_state10_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter1 = (m_axi_gmem1_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage0_iter2 = (read_stream_full_n == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign elements_loc_out_din = elements_loc_dout;

assign icmp_ln24_1_fu_173_p2 = ((add_ln21_reg_228 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_143_p2 = ((elements_loc_read_reg_211 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_194_p2 = ((padding_1_reg_134 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_183_p2 = ((img_width_read_reg_205 == 32'd4294967293) ? 1'b1 : 1'b0);

assign img_width_out_din = img_width_dout;

assign m_axi_gmem1_ARADDR = gmem1_addr_reg_222;

assign m_axi_gmem1_ARBURST = 2'd0;

assign m_axi_gmem1_ARCACHE = 4'd0;

assign m_axi_gmem1_ARID = 1'd0;

assign m_axi_gmem1_ARLEN = elements_loc_read_reg_211;

assign m_axi_gmem1_ARLOCK = 2'd0;

assign m_axi_gmem1_ARPROT = 3'd0;

assign m_axi_gmem1_ARQOS = 4'd0;

assign m_axi_gmem1_ARREGION = 4'd0;

assign m_axi_gmem1_ARSIZE = 3'd0;

assign m_axi_gmem1_ARUSER = 1'd0;

assign m_axi_gmem1_AWADDR = 64'd0;

assign m_axi_gmem1_AWBURST = 2'd0;

assign m_axi_gmem1_AWCACHE = 4'd0;

assign m_axi_gmem1_AWID = 1'd0;

assign m_axi_gmem1_AWLEN = 32'd0;

assign m_axi_gmem1_AWLOCK = 2'd0;

assign m_axi_gmem1_AWPROT = 3'd0;

assign m_axi_gmem1_AWQOS = 4'd0;

assign m_axi_gmem1_AWREGION = 4'd0;

assign m_axi_gmem1_AWSIZE = 3'd0;

assign m_axi_gmem1_AWUSER = 1'd0;

assign m_axi_gmem1_AWVALID = 1'b0;

assign m_axi_gmem1_BREADY = 1'b0;

assign m_axi_gmem1_WDATA = 32'd0;

assign m_axi_gmem1_WID = 1'd0;

assign m_axi_gmem1_WLAST = 1'b0;

assign m_axi_gmem1_WSTRB = 4'd0;

assign m_axi_gmem1_WUSER = 1'd0;

assign m_axi_gmem1_WVALID = 1'b0;

assign padding_2_fu_188_p2 = ($signed(padding_1_reg_134) + $signed(32'd4294967295));

assign padding_fu_178_p2 = (img_width_read_reg_205 + 32'd2);

assign sext_ln24_fu_157_p1 = $signed(trunc_ln_fu_148_p4);

assign trunc_ln_fu_148_p4 = {{inFrame_read_reg_200[63:2]}};

endmodule //convolve_fpga_read_dataflow_1
