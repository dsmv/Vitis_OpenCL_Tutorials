// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolve_fpga_compute_dataflow_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        write_stream_din,
        write_stream_full_n,
        write_stream_write,
        read_stream_dout,
        read_stream_empty_n,
        read_stream_read,
        m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY,
        m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY,
        m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST,
        m_axi_gmem3_WID,
        m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY,
        m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID,
        m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA,
        m_axi_gmem3_RLAST,
        m_axi_gmem3_RID,
        m_axi_gmem3_RUSER,
        m_axi_gmem3_RRESP,
        m_axi_gmem3_BVALID,
        m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP,
        m_axi_gmem3_BID,
        m_axi_gmem3_BUSER,
        coefficient_dout,
        coefficient_empty_n,
        coefficient_read,
        img_width_dout,
        img_width_empty_n,
        img_width_read,
        elements_loc_dout,
        elements_loc_empty_n,
        elements_loc_read,
        elements_loc_out_din,
        elements_loc_out_full_n,
        elements_loc_out_write
);

parameter    ap_ST_fsm_state1 = 19'd1;
parameter    ap_ST_fsm_state2 = 19'd2;
parameter    ap_ST_fsm_state3 = 19'd4;
parameter    ap_ST_fsm_state4 = 19'd8;
parameter    ap_ST_fsm_state5 = 19'd16;
parameter    ap_ST_fsm_state6 = 19'd32;
parameter    ap_ST_fsm_state7 = 19'd64;
parameter    ap_ST_fsm_state8 = 19'd128;
parameter    ap_ST_fsm_pp0_stage0 = 19'd256;
parameter    ap_ST_fsm_state19 = 19'd512;
parameter    ap_ST_fsm_pp1_stage0 = 19'd1024;
parameter    ap_ST_fsm_state22 = 19'd2048;
parameter    ap_ST_fsm_pp2_stage0 = 19'd4096;
parameter    ap_ST_fsm_state26 = 19'd8192;
parameter    ap_ST_fsm_pp3_stage0 = 19'd16384;
parameter    ap_ST_fsm_state30 = 19'd32768;
parameter    ap_ST_fsm_pp4_stage0 = 19'd65536;
parameter    ap_ST_fsm_pp4_stage1 = 19'd131072;
parameter    ap_ST_fsm_state43 = 19'd262144;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [31:0] write_stream_din;
input   write_stream_full_n;
output   write_stream_write;
input  [31:0] read_stream_dout;
input   read_stream_empty_n;
output   read_stream_read;
output   m_axi_gmem3_AWVALID;
input   m_axi_gmem3_AWREADY;
output  [63:0] m_axi_gmem3_AWADDR;
output  [0:0] m_axi_gmem3_AWID;
output  [31:0] m_axi_gmem3_AWLEN;
output  [2:0] m_axi_gmem3_AWSIZE;
output  [1:0] m_axi_gmem3_AWBURST;
output  [1:0] m_axi_gmem3_AWLOCK;
output  [3:0] m_axi_gmem3_AWCACHE;
output  [2:0] m_axi_gmem3_AWPROT;
output  [3:0] m_axi_gmem3_AWQOS;
output  [3:0] m_axi_gmem3_AWREGION;
output  [0:0] m_axi_gmem3_AWUSER;
output   m_axi_gmem3_WVALID;
input   m_axi_gmem3_WREADY;
output  [31:0] m_axi_gmem3_WDATA;
output  [3:0] m_axi_gmem3_WSTRB;
output   m_axi_gmem3_WLAST;
output  [0:0] m_axi_gmem3_WID;
output  [0:0] m_axi_gmem3_WUSER;
output   m_axi_gmem3_ARVALID;
input   m_axi_gmem3_ARREADY;
output  [63:0] m_axi_gmem3_ARADDR;
output  [0:0] m_axi_gmem3_ARID;
output  [31:0] m_axi_gmem3_ARLEN;
output  [2:0] m_axi_gmem3_ARSIZE;
output  [1:0] m_axi_gmem3_ARBURST;
output  [1:0] m_axi_gmem3_ARLOCK;
output  [3:0] m_axi_gmem3_ARCACHE;
output  [2:0] m_axi_gmem3_ARPROT;
output  [3:0] m_axi_gmem3_ARQOS;
output  [3:0] m_axi_gmem3_ARREGION;
output  [0:0] m_axi_gmem3_ARUSER;
input   m_axi_gmem3_RVALID;
output   m_axi_gmem3_RREADY;
input  [31:0] m_axi_gmem3_RDATA;
input   m_axi_gmem3_RLAST;
input  [0:0] m_axi_gmem3_RID;
input  [0:0] m_axi_gmem3_RUSER;
input  [1:0] m_axi_gmem3_RRESP;
input   m_axi_gmem3_BVALID;
output   m_axi_gmem3_BREADY;
input  [1:0] m_axi_gmem3_BRESP;
input  [0:0] m_axi_gmem3_BID;
input  [0:0] m_axi_gmem3_BUSER;
input  [63:0] coefficient_dout;
input   coefficient_empty_n;
output   coefficient_read;
input  [31:0] img_width_dout;
input   img_width_empty_n;
output   img_width_read;
input  [31:0] elements_loc_dout;
input   elements_loc_empty_n;
output   elements_loc_read;
output  [31:0] elements_loc_out_din;
input   elements_loc_out_full_n;
output   elements_loc_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg write_stream_write;
reg read_stream_read;
reg m_axi_gmem3_ARVALID;
reg m_axi_gmem3_RREADY;
reg coefficient_read;
reg img_width_read;
reg elements_loc_read;
reg elements_loc_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [18:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] window_mem_0_address0;
reg    window_mem_0_ce0;
reg    window_mem_0_we0;
reg   [31:0] window_mem_0_d0;
wire   [31:0] window_mem_0_q0;
reg   [10:0] window_mem_0_address1;
reg    window_mem_0_ce1;
wire   [31:0] window_mem_0_q1;
reg   [10:0] window_mem_1_address0;
reg    window_mem_1_ce0;
reg    window_mem_1_we0;
wire   [31:0] window_mem_1_q0;
reg   [10:0] window_mem_1_address1;
reg    window_mem_1_ce1;
wire   [31:0] window_mem_1_q1;
reg   [10:0] window_mem_2_address0;
reg    window_mem_2_ce0;
reg    window_mem_2_we0;
wire   [31:0] window_mem_2_q0;
reg   [10:0] window_mem_2_address1;
reg    window_mem_2_ce1;
wire   [31:0] window_mem_2_q1;
reg   [15:0] coef_V_0;
reg   [15:0] coef_V_1;
reg   [15:0] coef_V_2;
reg   [15:0] coef_V_3;
reg   [15:0] coef_V_4;
reg   [15:0] coef_V_5;
reg   [15:0] coef_V_6;
reg   [15:0] coef_V_7;
reg   [15:0] coef_V_8;
reg    write_stream_blk_n;
wire    ap_CS_fsm_pp4_stage1;
reg    ap_enable_reg_pp4_iter5;
wire    ap_block_pp4_stage1;
reg    read_stream_blk_n;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_pp2_stage0;
reg   [0:0] icmp_ln55_reg_2292;
wire    ap_CS_fsm_pp3_stage0;
reg    ap_enable_reg_pp3_iter1;
wire    ap_block_pp3_stage0;
reg   [0:0] icmp_ln61_reg_2301;
reg    ap_enable_reg_pp4_iter0;
reg    gmem3_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    gmem3_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg    coefficient_blk_n;
reg    img_width_blk_n;
reg    elements_loc_blk_n;
reg    elements_loc_out_blk_n;
reg   [3:0] i_reg_415;
reg   [3:0] i_reg_415_pp0_iter1_reg;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
wire    ap_block_state12_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state14_pp0_stage0_iter5;
wire    ap_block_state15_pp0_stage0_iter6;
wire    ap_block_state16_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state18_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
reg   [3:0] i_reg_415_pp0_iter2_reg;
reg   [3:0] i_reg_415_pp0_iter3_reg;
reg   [3:0] i_reg_415_pp0_iter4_reg;
reg   [3:0] i_reg_415_pp0_iter5_reg;
reg   [3:0] i_reg_415_pp0_iter6_reg;
reg   [3:0] i_reg_415_pp0_iter7_reg;
reg   [3:0] i_reg_415_pp0_iter8_reg;
reg   [30:0] i_1_reg_427;
reg   [30:0] ii_reg_439;
reg   [30:0] ii_reg_439_pp2_iter1_reg;
wire    ap_block_state23_pp2_stage0_iter0;
reg    ap_block_state24_pp2_stage0_iter1;
wire    ap_block_state25_pp2_stage0_iter2;
reg    ap_block_pp2_stage0_11001;
reg   [1:0] ii_1_reg_451;
reg   [1:0] ii_1_reg_451_pp3_iter1_reg;
wire    ap_block_state27_pp3_stage0_iter0;
reg    ap_block_state28_pp3_stage0_iter1;
wire    ap_block_state29_pp3_stage0_iter2;
reg    ap_block_pp3_stage0_11001;
reg   [31:0] dec531_in_i_i_reg_463;
reg  signed [31:0] j_reg_472;
reg   [31:0] top_idx_1_reg_484;
reg   [31:0] insert_column_idx_reg_496;
reg   [31:0] insert_idx_reg_507;
reg   [31:0] reg_522;
reg    ap_block_state32_pp4_stage1_iter0;
wire    ap_block_state34_pp4_stage1_iter1;
wire    ap_block_state36_pp4_stage1_iter2;
wire    ap_block_state38_pp4_stage1_iter3;
wire    ap_block_state40_pp4_stage1_iter4;
reg    ap_block_state42_pp4_stage1_iter5;
reg    ap_block_pp4_stage1_11001;
reg   [31:0] reg_529;
wire    ap_CS_fsm_pp4_stage0;
reg    ap_enable_reg_pp4_iter1;
wire    ap_block_state31_pp4_stage0_iter0;
wire    ap_block_state33_pp4_stage0_iter1;
wire    ap_block_state35_pp4_stage0_iter2;
wire    ap_block_state37_pp4_stage0_iter3;
wire    ap_block_state39_pp4_stage0_iter4;
wire    ap_block_state41_pp4_stage0_iter5;
wire    ap_block_pp4_stage0_11001;
reg   [31:0] reg_534;
reg   [31:0] reg_539;
reg  signed [31:0] img_width_read_reg_2135;
reg    ap_block_state1;
reg   [31:0] elements_loc_read_reg_2145;
reg   [63:0] gmem3_addr_reg_2151;
wire   [0:0] icmp_ln42_fu_597_p2;
reg   [0:0] icmp_ln42_reg_2157;
wire   [3:0] add_ln42_fu_603_p2;
reg   [3:0] add_ln42_reg_2161;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] gmem3_addr_read_reg_2166;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter2_reg;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter3_reg;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter4_reg;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter5_reg;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter6_reg;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter7_reg;
reg   [31:0] gmem3_addr_read_reg_2166_pp0_iter8_reg;
wire   [62:0] trunc_ln555_fu_617_p1;
reg   [62:0] trunc_ln555_reg_2177;
reg   [0:0] p_Result_3_reg_2182;
reg   [0:0] p_Result_3_reg_2182_pp0_iter5_reg;
reg   [0:0] p_Result_3_reg_2182_pp0_iter6_reg;
reg   [10:0] exp_tmp_V_reg_2187;
wire   [51:0] trunc_ln565_fu_639_p1;
reg   [51:0] trunc_ln565_reg_2192;
reg   [51:0] trunc_ln565_reg_2192_pp0_iter5_reg;
reg   [51:0] trunc_ln565_reg_2192_pp0_iter6_reg;
wire   [0:0] icmp_ln571_fu_646_p2;
reg   [0:0] icmp_ln571_reg_2197;
reg   [0:0] icmp_ln571_reg_2197_pp0_iter6_reg;
reg   [0:0] icmp_ln571_reg_2197_pp0_iter7_reg;
reg   [0:0] icmp_ln571_reg_2197_pp0_iter8_reg;
wire   [11:0] F2_fu_651_p2;
reg   [11:0] F2_reg_2204;
wire   [0:0] icmp_ln581_fu_667_p2;
reg   [0:0] icmp_ln581_reg_2211;
reg   [0:0] icmp_ln581_reg_2211_pp0_iter6_reg;
reg   [0:0] icmp_ln581_reg_2211_pp0_iter7_reg;
reg   [0:0] icmp_ln581_reg_2211_pp0_iter8_reg;
wire  signed [11:0] sh_amt_fu_683_p3;
reg  signed [11:0] sh_amt_reg_2218;
reg  signed [11:0] sh_amt_reg_2218_pp0_iter7_reg;
reg  signed [11:0] sh_amt_reg_2218_pp0_iter8_reg;
wire   [0:0] icmp_ln582_fu_690_p2;
reg   [0:0] icmp_ln582_reg_2225;
reg   [0:0] icmp_ln582_reg_2225_pp0_iter7_reg;
reg   [7:0] tmp_20_reg_2231;
wire   [53:0] select_ln570_fu_722_p3;
reg   [53:0] select_ln570_reg_2236;
wire   [15:0] trunc_ln583_fu_729_p1;
reg   [15:0] trunc_ln583_reg_2241;
reg   [15:0] trunc_ln583_reg_2241_pp0_iter8_reg;
wire   [0:0] icmp_ln585_fu_733_p2;
reg   [0:0] icmp_ln585_reg_2247;
reg   [0:0] icmp_ln585_reg_2247_pp0_iter8_reg;
wire   [0:0] icmp_ln603_fu_738_p2;
reg   [0:0] icmp_ln603_reg_2253;
reg   [0:0] icmp_ln603_reg_2253_pp0_iter8_reg;
wire   [0:0] or_ln582_fu_776_p2;
reg   [0:0] or_ln582_reg_2258;
wire   [0:0] and_ln581_fu_786_p2;
reg   [0:0] and_ln581_reg_2263;
wire   [15:0] select_ln585_fu_796_p3;
reg   [15:0] select_ln585_reg_2268;
wire   [0:0] icmp_ln48_fu_932_p2;
wire    ap_CS_fsm_state19;
wire   [30:0] trunc_ln48_fu_937_p1;
reg   [30:0] trunc_ln48_reg_2277;
wire   [0:0] icmp_ln48_1_fu_940_p2;
reg   [0:0] icmp_ln48_1_reg_2283;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state20_pp1_stage0_iter0;
wire    ap_block_state21_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [30:0] add_ln48_fu_945_p2;
reg   [30:0] add_ln48_reg_2287;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] icmp_ln55_fu_956_p2;
reg   [0:0] icmp_ln55_reg_2292_pp2_iter1_reg;
wire   [30:0] add_ln55_fu_961_p2;
reg   [30:0] add_ln55_reg_2296;
reg    ap_enable_reg_pp2_iter0;
wire   [0:0] icmp_ln61_fu_972_p2;
reg   [0:0] icmp_ln61_reg_2301_pp3_iter1_reg;
wire   [1:0] add_ln61_fu_978_p2;
reg   [1:0] add_ln61_reg_2305;
reg    ap_enable_reg_pp3_iter0;
wire   [0:0] icmp_ln70_fu_989_p2;
wire    ap_CS_fsm_state30;
wire  signed [32:0] sext_ln70_fu_994_p1;
reg  signed [32:0] sext_ln70_reg_2314;
wire   [31:0] add_ln35_fu_997_p2;
reg   [31:0] add_ln35_reg_2320;
wire   [32:0] add_ln74_fu_1007_p2;
reg   [32:0] add_ln74_reg_2326;
wire   [1:0] trunc_ln75_fu_1013_p1;
reg   [1:0] trunc_ln75_reg_2332;
reg   [1:0] trunc_ln75_reg_2332_pp4_iter1_reg;
wire   [32:0] add_ln74_1_fu_1017_p2;
reg   [32:0] add_ln74_1_reg_2338;
wire   [32:0] add_ln74_2_fu_1023_p2;
reg   [32:0] add_ln74_2_reg_2345;
wire   [31:0] add_ln81_fu_1029_p2;
reg   [31:0] add_ln81_reg_2350;
wire   [31:0] j_1_fu_1035_p2;
reg   [31:0] j_1_reg_2356;
wire   [0:0] and_ln75_fu_1057_p2;
reg   [0:0] and_ln75_reg_2362;
reg   [0:0] and_ln75_reg_2362_pp4_iter1_reg;
wire   [0:0] and_ln75_1_fu_1079_p2;
reg   [0:0] and_ln75_1_reg_2385;
reg   [0:0] and_ln75_1_reg_2385_pp4_iter1_reg;
wire   [0:0] and_ln75_2_fu_1094_p2;
reg   [0:0] and_ln75_2_reg_2393;
wire   [31:0] select_ln81_fu_1105_p3;
reg   [31:0] select_ln81_reg_2416;
wire   [1:0] trunc_ln75_7_fu_1112_p1;
reg   [1:0] trunc_ln75_7_reg_2421;
reg   [1:0] trunc_ln75_7_reg_2421_pp4_iter1_reg;
wire   [31:0] window_line_idx_fu_1120_p3;
reg   [31:0] window_line_idx_reg_2428;
wire   [31:0] j_2_fu_1128_p3;
reg   [31:0] j_2_reg_2433;
wire   [0:0] icmp_ln70_1_fu_1135_p2;
reg   [0:0] icmp_ln70_1_reg_2438;
reg   [0:0] icmp_ln70_1_reg_2438_pp4_iter1_reg;
reg   [31:0] window_mem_0_load_2_reg_2457;
reg   [31:0] window_mem_1_load_2_reg_2464;
reg   [31:0] window_mem_2_load_2_reg_2471;
wire   [1:0] select_ln81_1_fu_1157_p3;
reg   [1:0] select_ln81_1_reg_2478;
wire   [31:0] add_ln92_fu_1176_p2;
reg   [31:0] add_ln92_reg_2487;
wire   [31:0] add_ln95_fu_1182_p2;
reg   [31:0] add_ln95_reg_2493;
wire   [23:0] trunc_ln75_1_fu_1188_p1;
reg   [23:0] trunc_ln75_1_reg_2499;
wire   [7:0] trunc_ln75_6_fu_1211_p1;
reg   [7:0] trunc_ln75_6_reg_2504;
reg   [7:0] lshr_ln75_4_reg_2509;
wire   [15:0] select_ln703_2_fu_1225_p3;
reg   [15:0] select_ln703_2_reg_2514;
reg   [7:0] tmp_10_reg_2520;
wire   [23:0] trunc_ln75_8_fu_1242_p1;
reg   [23:0] trunc_ln75_8_reg_2525;
wire   [7:0] trunc_ln75_13_fu_1265_p1;
reg   [7:0] trunc_ln75_13_reg_2530;
reg   [7:0] lshr_ln75_s_reg_2535;
reg   [7:0] tmp_13_reg_2540;
wire   [7:0] trunc_ln75_15_fu_1300_p1;
reg   [7:0] trunc_ln75_15_reg_2545;
reg   [7:0] lshr_ln75_1_reg_2550;
reg   [7:0] tmp_14_reg_2555;
wire  signed [15:0] and_ln703_8_fu_1365_p2;
wire   [31:0] insert_idx_1_fu_1405_p3;
reg   [31:0] insert_idx_1_reg_2582;
wire   [31:0] insert_column_idx_1_fu_1413_p3;
reg   [31:0] insert_column_idx_1_reg_2587;
wire   [7:0] trunc_ln75_2_fu_1426_p1;
reg   [7:0] trunc_ln75_2_reg_2592;
reg   [7:0] lshr_ln_reg_2597;
wire   [15:0] select_ln703_fu_1440_p3;
reg   [15:0] select_ln703_reg_2602;
reg   [7:0] tmp_9_reg_2609;
wire  signed [15:0] and_ln703_1_fu_1497_p2;
wire  signed [15:0] and_ln703_2_fu_1528_p2;
wire   [7:0] trunc_ln75_9_fu_1545_p1;
reg   [7:0] trunc_ln75_9_reg_2658;
reg   [7:0] lshr_ln75_6_reg_2663;
reg   [7:0] tmp_11_reg_2668;
wire  signed [15:0] and_ln703_4_fu_1602_p2;
wire  signed [15:0] and_ln703_7_fu_1659_p2;
wire  signed [15:0] and_ln703_fu_1690_p2;
wire  signed [15:0] and_ln703_3_fu_1708_p2;
reg  signed [15:0] and_ln703_3_reg_2744;
wire  signed [15:0] and_ln703_5_fu_1723_p2;
wire  signed [15:0] and_ln703_6_fu_1741_p2;
wire  signed [15:0] grp_fu_1944_p2;
wire  signed [15:0] grp_fu_1950_p2;
wire  signed [15:0] grp_fu_1956_p2;
wire  signed [15:0] grp_fu_1962_p2;
wire  signed [15:0] grp_fu_1968_p2;
wire  signed [15:0] grp_fu_1974_p2;
wire  signed [15:0] grp_fu_2004_p2;
wire  signed [15:0] grp_fu_2010_p2;
wire  signed [15:0] grp_fu_2016_p2;
wire  signed [15:0] grp_fu_2022_p2;
wire  signed [15:0] grp_fu_2028_p2;
wire  signed [15:0] grp_fu_2034_p2;
wire  signed [15:0] grp_fu_1980_p3;
reg    ap_enable_reg_pp4_iter3;
wire  signed [15:0] grp_fu_1988_p3;
wire  signed [15:0] grp_fu_1996_p3;
reg  signed [15:0] add_ln703_20_reg_2875;
wire  signed [15:0] grp_fu_2104_p3;
reg  signed [15:0] add_ln703_reg_2880;
reg    ap_enable_reg_pp4_iter4;
wire  signed [15:0] grp_fu_2080_p3;
reg  signed [15:0] add_ln703_1_reg_2885;
wire  signed [15:0] grp_fu_2040_p3;
reg  signed [15:0] add_ln703_3_reg_2890;
wire  signed [15:0] grp_fu_2064_p3;
reg  signed [15:0] add_ln703_5_reg_2895;
wire  signed [15:0] grp_fu_2112_p3;
reg  signed [15:0] add_ln703_8_reg_2900;
wire  signed [15:0] grp_fu_2088_p3;
reg  signed [15:0] add_ln703_9_reg_2905;
wire  signed [15:0] grp_fu_2048_p3;
reg  signed [15:0] add_ln703_11_reg_2910;
wire  signed [15:0] grp_fu_2072_p3;
reg  signed [15:0] add_ln703_13_reg_2915;
wire  signed [15:0] grp_fu_2120_p3;
reg  signed [15:0] add_ln703_16_reg_2920;
wire  signed [15:0] grp_fu_2096_p3;
reg  signed [15:0] add_ln703_17_reg_2925;
wire  signed [15:0] grp_fu_2056_p3;
reg  signed [15:0] add_ln703_19_reg_2930;
wire   [15:0] add_ln703_7_fu_1763_p2;
reg   [15:0] add_ln703_7_reg_2935;
wire   [15:0] add_ln703_15_fu_1777_p2;
reg   [15:0] add_ln703_15_reg_2940;
wire   [15:0] add_ln703_23_fu_1791_p2;
reg   [15:0] add_ln703_23_reg_2945;
reg   [7:0] trunc_ln_reg_2950;
wire   [6:0] trunc_ln851_fu_1807_p1;
reg   [6:0] trunc_ln851_reg_2957;
reg   [7:0] trunc_ln850_1_reg_2962;
wire   [6:0] trunc_ln851_1_fu_1821_p1;
reg   [6:0] trunc_ln851_1_reg_2969;
reg   [7:0] trunc_ln850_2_reg_2974;
wire   [6:0] trunc_ln851_2_fu_1835_p1;
reg   [6:0] trunc_ln851_2_reg_2981;
wire   [7:0] select_ln850_3_fu_1863_p3;
reg   [7:0] select_ln850_3_reg_2986;
wire   [7:0] select_ln850_4_fu_1894_p3;
reg   [7:0] select_ln850_4_reg_2991;
wire   [7:0] select_ln850_5_fu_1925_p3;
reg   [7:0] select_ln850_5_reg_2996;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state20;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state22;
reg    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state23;
reg    ap_enable_reg_pp2_iter2;
wire    ap_CS_fsm_state26;
reg    ap_block_pp3_stage0_subdone;
reg    ap_condition_pp3_exit_iter0_state27;
reg    ap_enable_reg_pp3_iter2;
reg    ap_block_pp4_stage1_subdone;
reg    ap_condition_pp4_flush_enable;
reg    ap_enable_reg_pp4_iter2;
reg   [3:0] ap_phi_mux_i_phi_fu_419_p4;
reg   [30:0] ap_phi_mux_i_1_phi_fu_431_p4;
wire    ap_block_pp1_stage0;
reg   [30:0] ap_phi_mux_ii_phi_fu_443_p4;
reg   [1:0] ap_phi_mux_ii_1_phi_fu_455_p4;
reg   [31:0] ap_phi_mux_dec531_in_i_i_phi_fu_466_p4;
wire    ap_block_pp4_stage0;
reg  signed [31:0] ap_phi_mux_j_phi_fu_476_p4;
reg   [31:0] ap_phi_mux_top_idx_1_phi_fu_488_p4;
reg   [31:0] ap_phi_mux_insert_column_idx_phi_fu_500_p4;
reg   [31:0] ap_phi_mux_insert_idx_phi_fu_511_p4;
wire   [63:0] i_1_cast_i_i_fu_951_p1;
wire   [63:0] ii_cast_i_i_fu_967_p1;
wire   [63:0] ii_1_cast_i_i_fu_984_p1;
wire   [63:0] zext_ln75_fu_1041_p1;
wire   [63:0] zext_ln75_1_fu_1063_p1;
wire   [63:0] zext_ln72_fu_1140_p1;
wire   [63:0] zext_ln92_fu_1165_p1;
wire  signed [63:0] sext_ln42_fu_587_p1;
wire   [15:0] select_ln571_fu_871_p3;
reg    ap_block_pp4_stage1_01001;
wire   [1:0] trunc_ln92_fu_1172_p1;
wire   [31:0] grp_fu_519_p0;
reg   [1:0] grp_fu_555_p4;
wire   [61:0] trunc_ln1_fu_577_p4;
wire   [63:0] grp_fu_519_p1;
wire   [63:0] ireg_fu_613_p1;
wire   [11:0] zext_ln455_fu_643_p1;
wire   [8:0] tmp_19_fu_657_p4;
wire   [11:0] add_ln581_fu_673_p2;
wire   [11:0] sub_ln581_fu_678_p2;
wire   [52:0] p_Result_4_fu_705_p3;
wire   [53:0] zext_ln569_fu_712_p1;
wire   [53:0] man_V_1_fu_716_p2;
wire   [5:0] trunc_ln586_fu_743_p1;
wire   [53:0] zext_ln586_fu_746_p1;
wire   [53:0] ashr_ln586_fu_750_p2;
wire   [0:0] xor_ln571_fu_759_p2;
wire   [0:0] and_ln582_fu_764_p2;
wire   [0:0] xor_ln582_fu_780_p2;
wire   [0:0] and_ln585_fu_791_p2;
wire   [15:0] trunc_ln586_1_fu_755_p1;
wire   [15:0] select_ln582_fu_769_p3;
wire   [0:0] tmp_21_fu_807_p3;
wire  signed [30:0] sext_ln581_fu_804_p1;
wire   [15:0] sext_ln581cast_fu_822_p1;
wire   [0:0] xor_ln585_fu_831_p2;
wire   [0:0] and_ln585_1_fu_836_p2;
wire   [15:0] select_ln588_fu_814_p3;
wire   [0:0] or_ln581_fu_848_p2;
wire   [0:0] xor_ln581_fu_852_p2;
wire   [0:0] and_ln603_fu_858_p2;
wire   [15:0] shl_ln604_fu_826_p2;
wire   [15:0] select_ln585_1_fu_841_p3;
wire   [15:0] select_ln603_fu_863_p3;
wire  signed [32:0] j_cast_i_i_fu_1003_p1;
wire   [0:0] icmp_ln75_fu_1047_p2;
wire   [0:0] icmp_ln75_1_fu_1053_p2;
wire   [0:0] icmp_ln75_2_fu_1069_p2;
wire   [0:0] icmp_ln75_3_fu_1074_p2;
wire   [0:0] icmp_ln75_4_fu_1085_p2;
wire   [0:0] icmp_ln75_5_fu_1090_p2;
wire   [0:0] icmp_ln81_fu_1100_p2;
wire   [0:0] icmp_ln87_fu_1116_p2;
wire   [0:0] icmp_ln81_1_fu_1147_p2;
wire   [1:0] add_ln81_1_fu_1152_p2;
wire   [31:0] grp_fu_544_p5;
wire   [31:0] tmp_2_fu_1192_p5;
wire   [23:0] trunc_ln75_5_fu_1200_p1;
wire   [23:0] select_ln75_2_fu_1204_p3;
wire   [31:0] grp_fu_555_p5;
wire   [31:0] tmp_5_fu_1246_p5;
wire   [23:0] trunc_ln75_12_fu_1254_p1;
wire   [23:0] select_ln75_5_fu_1258_p3;
wire   [31:0] grp_fu_566_p5;
wire   [23:0] trunc_ln75_14_fu_1289_p1;
wire   [23:0] select_ln75_6_fu_1293_p3;
wire   [31:0] tmp_8_fu_1324_p5;
wire   [23:0] trunc_ln75_18_fu_1332_p1;
wire   [23:0] select_ln75_8_fu_1336_p3;
wire   [7:0] lshr_ln75_5_fu_1347_p4;
wire   [7:0] trunc_ln75_19_fu_1343_p1;
wire   [7:0] tmp_16_fu_1375_p4;
wire   [0:0] icmp_ln95_fu_1393_p2;
wire   [0:0] icmp_ln93_fu_1389_p2;
wire   [31:0] select_ln95_fu_1398_p3;
wire   [23:0] select_ln75_fu_1420_p3;
wire   [23:0] trunc_ln75_3_fu_1457_p1;
wire   [23:0] select_ln75_1_fu_1461_p3;
wire   [7:0] lshr_ln75_2_fu_1472_p4;
wire   [15:0] select_ln703_1_fu_1490_p3;
wire   [7:0] trunc_ln75_4_fu_1468_p1;
wire   [7:0] tmp_s_fu_1507_p4;
wire   [23:0] select_ln75_3_fu_1539_p3;
wire   [23:0] trunc_ln75_10_fu_1569_p1;
wire   [23:0] select_ln75_4_fu_1573_p3;
wire   [7:0] lshr_ln75_8_fu_1584_p4;
wire   [7:0] trunc_ln75_11_fu_1580_p1;
wire   [7:0] tmp_12_fu_1612_p4;
wire   [23:0] trunc_ln75_16_fu_1626_p1;
wire   [23:0] select_ln75_7_fu_1630_p3;
wire   [7:0] lshr_ln75_3_fu_1641_p4;
wire   [7:0] trunc_ln75_17_fu_1637_p1;
wire   [7:0] tmp_15_fu_1669_p4;
(* use_dsp48 = "no" *) wire   [15:0] add_ln703_2_fu_1755_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln703_6_fu_1759_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln703_10_fu_1769_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln703_14_fu_1773_p2;
wire  signed [15:0] grp_fu_2128_p3;
(* use_dsp48 = "no" *) wire   [15:0] add_ln703_18_fu_1783_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln703_22_fu_1787_p2;
wire   [0:0] icmp_ln851_fu_1846_p2;
wire   [7:0] add_ln695_fu_1851_p2;
wire   [0:0] p_Result_s_fu_1839_p3;
wire   [7:0] select_ln850_fu_1856_p3;
wire   [0:0] icmp_ln851_1_fu_1877_p2;
wire   [7:0] add_ln695_1_fu_1882_p2;
wire   [0:0] p_Result_1_fu_1870_p3;
wire   [7:0] select_ln850_1_fu_1887_p3;
wire   [0:0] icmp_ln851_2_fu_1908_p2;
wire   [7:0] add_ln695_2_fu_1913_p2;
wire   [0:0] p_Result_2_fu_1901_p3;
wire   [7:0] select_ln850_2_fu_1918_p3;
wire   [23:0] tmp_10_i_i_fu_1932_p4;
wire   [7:0] grp_fu_1944_p0;
wire   [7:0] grp_fu_1950_p1;
wire   [7:0] grp_fu_1956_p1;
wire   [7:0] grp_fu_1962_p0;
wire   [7:0] grp_fu_1968_p1;
wire   [7:0] grp_fu_1974_p1;
wire   [7:0] grp_fu_1980_p0;
wire   [7:0] grp_fu_1988_p1;
wire   [7:0] grp_fu_1996_p1;
wire   [7:0] grp_fu_2004_p0;
wire   [7:0] grp_fu_2010_p0;
wire   [7:0] grp_fu_2016_p0;
wire   [7:0] grp_fu_2022_p0;
wire   [7:0] grp_fu_2028_p0;
wire   [7:0] grp_fu_2034_p0;
wire   [7:0] grp_fu_2040_p0;
wire   [7:0] grp_fu_2048_p1;
wire   [7:0] grp_fu_2056_p1;
wire   [7:0] grp_fu_2064_p0;
wire   [7:0] grp_fu_2072_p0;
wire   [7:0] grp_fu_2080_p0;
wire   [7:0] grp_fu_2088_p0;
wire   [7:0] grp_fu_2096_p0;
wire   [7:0] grp_fu_2104_p0;
wire   [7:0] grp_fu_2112_p0;
wire   [7:0] grp_fu_2120_p0;
wire   [7:0] grp_fu_2128_p0;
reg    grp_fu_519_ce;
reg    grp_fu_1944_ce;
reg    grp_fu_1950_ce;
reg    grp_fu_1956_ce;
reg    grp_fu_1962_ce;
reg    grp_fu_1968_ce;
reg    grp_fu_1974_ce;
reg    grp_fu_1980_ce;
reg    grp_fu_1988_ce;
reg    grp_fu_1996_ce;
reg    grp_fu_2004_ce;
reg    grp_fu_2010_ce;
reg    grp_fu_2016_ce;
reg    grp_fu_2022_ce;
reg    grp_fu_2028_ce;
reg    grp_fu_2034_ce;
reg    grp_fu_2040_ce;
reg    grp_fu_2048_ce;
reg    grp_fu_2056_ce;
reg    grp_fu_2064_ce;
reg    grp_fu_2072_ce;
reg    grp_fu_2080_ce;
reg    grp_fu_2088_ce;
reg    grp_fu_2096_ce;
reg    grp_fu_2104_ce;
reg    grp_fu_2112_ce;
reg    grp_fu_2120_ce;
reg    grp_fu_2128_ce;
wire    ap_CS_fsm_state43;
reg   [18:0] ap_NS_fsm;
wire    ap_block_pp4_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
reg    ap_idle_pp3;
wire    ap_enable_pp3;
reg    ap_idle_pp4;
wire    ap_enable_pp4;
wire   [15:0] grp_fu_1944_p00;
wire   [15:0] grp_fu_1950_p10;
wire   [15:0] grp_fu_1956_p10;
wire   [15:0] grp_fu_1962_p00;
wire   [15:0] grp_fu_1968_p10;
wire   [15:0] grp_fu_1974_p10;
wire   [15:0] grp_fu_1980_p00;
wire   [15:0] grp_fu_1988_p10;
wire   [15:0] grp_fu_1996_p10;
wire   [15:0] grp_fu_2004_p00;
wire   [15:0] grp_fu_2010_p00;
wire   [15:0] grp_fu_2016_p00;
wire   [15:0] grp_fu_2022_p00;
wire   [15:0] grp_fu_2028_p00;
wire   [15:0] grp_fu_2034_p00;
wire   [15:0] grp_fu_2040_p00;
wire   [15:0] grp_fu_2048_p10;
wire   [15:0] grp_fu_2056_p10;
wire   [15:0] grp_fu_2064_p00;
wire   [15:0] grp_fu_2072_p00;
wire   [15:0] grp_fu_2080_p00;
wire   [15:0] grp_fu_2088_p00;
wire   [15:0] grp_fu_2096_p00;
wire   [15:0] grp_fu_2104_p00;
wire   [15:0] grp_fu_2112_p00;
wire   [15:0] grp_fu_2120_p00;
wire   [15:0] grp_fu_2128_p00;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 19'd1;
#0 coef_V_0 = 16'd0;
#0 coef_V_1 = 16'd0;
#0 coef_V_2 = 16'd0;
#0 coef_V_3 = 16'd0;
#0 coef_V_4 = 16'd0;
#0 coef_V_5 = 16'd0;
#0 coef_V_6 = 16'd0;
#0 coef_V_7 = 16'd0;
#0 coef_V_8 = 16'd0;
#0 ap_enable_reg_pp4_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp3_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp4_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp3_iter0 = 1'b0;
#0 ap_enable_reg_pp4_iter3 = 1'b0;
#0 ap_enable_reg_pp4_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp3_iter2 = 1'b0;
#0 ap_enable_reg_pp4_iter2 = 1'b0;
end

convolve_fpga_compute_dataflow_1_window_mem_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
window_mem_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_mem_0_address0),
    .ce0(window_mem_0_ce0),
    .we0(window_mem_0_we0),
    .d0(window_mem_0_d0),
    .q0(window_mem_0_q0),
    .address1(window_mem_0_address1),
    .ce1(window_mem_0_ce1),
    .q1(window_mem_0_q1)
);

convolve_fpga_compute_dataflow_1_window_mem_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
window_mem_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_mem_1_address0),
    .ce0(window_mem_1_ce0),
    .we0(window_mem_1_we0),
    .d0(reg_522),
    .q0(window_mem_1_q0),
    .address1(window_mem_1_address1),
    .ce1(window_mem_1_ce1),
    .q1(window_mem_1_q1)
);

convolve_fpga_compute_dataflow_1_window_mem_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1920 ),
    .AddressWidth( 11 ))
window_mem_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(window_mem_2_address0),
    .ce0(window_mem_2_ce0),
    .we0(window_mem_2_we0),
    .d0(reg_522),
    .q0(window_mem_2_q0),
    .address1(window_mem_2_address1),
    .ce1(window_mem_2_ce1),
    .q1(window_mem_2_q1)
);

convolve_fpga_fpext_32ns_64_3_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_3_no_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_519_p0),
    .ce(grp_fu_519_ce),
    .dout(grp_fu_519_p1)
);

convolve_fpga_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U21(
    .din0(reg_529),
    .din1(reg_534),
    .din2(reg_539),
    .din3(trunc_ln75_reg_2332_pp4_iter1_reg),
    .dout(grp_fu_544_p5)
);

convolve_fpga_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U22(
    .din0(reg_529),
    .din1(reg_534),
    .din2(reg_539),
    .din3(grp_fu_555_p4),
    .dout(grp_fu_555_p5)
);

convolve_fpga_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U23(
    .din0(reg_529),
    .din1(reg_534),
    .din2(reg_539),
    .din3(select_ln81_1_reg_2478),
    .dout(grp_fu_566_p5)
);

convolve_fpga_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U24(
    .din0(window_mem_0_load_2_reg_2457),
    .din1(window_mem_1_load_2_reg_2464),
    .din2(window_mem_2_load_2_reg_2471),
    .din3(trunc_ln75_reg_2332_pp4_iter1_reg),
    .dout(tmp_2_fu_1192_p5)
);

convolve_fpga_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U25(
    .din0(window_mem_0_load_2_reg_2457),
    .din1(window_mem_1_load_2_reg_2464),
    .din2(window_mem_2_load_2_reg_2471),
    .din3(trunc_ln75_7_reg_2421),
    .dout(tmp_5_fu_1246_p5)
);

convolve_fpga_mux_32_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_32_32_1_1_U26(
    .din0(window_mem_0_load_2_reg_2457),
    .din1(window_mem_1_load_2_reg_2464),
    .din2(window_mem_2_load_2_reg_2471),
    .din3(select_ln81_1_reg_2478),
    .dout(tmp_8_fu_1324_p5)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1944_p0),
    .din1(and_ln703_8_fu_1365_p2),
    .ce(grp_fu_1944_ce),
    .dout(grp_fu_1944_p2)
);

convolve_fpga_mul_mul_16s_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_8ns_16_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_8_fu_1365_p2),
    .din1(grp_fu_1950_p1),
    .ce(grp_fu_1950_ce),
    .dout(grp_fu_1950_p2)
);

convolve_fpga_mul_mul_16s_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_8ns_16_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_8_fu_1365_p2),
    .din1(grp_fu_1956_p1),
    .ce(grp_fu_1956_ce),
    .dout(grp_fu_1956_p2)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1962_p0),
    .din1(and_ln703_1_fu_1497_p2),
    .ce(grp_fu_1962_ce),
    .dout(grp_fu_1962_p2)
);

convolve_fpga_mul_mul_16s_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_8ns_16_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_1_fu_1497_p2),
    .din1(grp_fu_1968_p1),
    .ce(grp_fu_1968_ce),
    .dout(grp_fu_1968_p2)
);

convolve_fpga_mul_mul_16s_8ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
mul_mul_16s_8ns_16_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_1_fu_1497_p2),
    .din1(grp_fu_1974_p1),
    .ce(grp_fu_1974_ce),
    .dout(grp_fu_1974_p2)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_1980_p0),
    .din1(and_ln703_2_fu_1528_p2),
    .din2(grp_fu_1944_p2),
    .ce(grp_fu_1980_ce),
    .dout(grp_fu_1980_p3)
);

convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16s_16_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_2_fu_1528_p2),
    .din1(grp_fu_1988_p1),
    .din2(grp_fu_1950_p2),
    .ce(grp_fu_1988_ce),
    .dout(grp_fu_1988_p3)
);

convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16s_16_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_2_fu_1528_p2),
    .din1(grp_fu_1996_p1),
    .din2(grp_fu_1956_p2),
    .ce(grp_fu_1996_ce),
    .dout(grp_fu_1996_p3)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2004_p0),
    .din1(and_ln703_4_fu_1602_p2),
    .ce(grp_fu_2004_ce),
    .dout(grp_fu_2004_p2)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2010_p0),
    .din1(and_ln703_4_fu_1602_p2),
    .ce(grp_fu_2010_ce),
    .dout(grp_fu_2010_p2)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2016_p0),
    .din1(and_ln703_4_fu_1602_p2),
    .ce(grp_fu_2016_ce),
    .dout(grp_fu_2016_p2)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2022_p0),
    .din1(and_ln703_7_fu_1659_p2),
    .ce(grp_fu_2022_ce),
    .dout(grp_fu_2022_p2)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2028_p0),
    .din1(and_ln703_7_fu_1659_p2),
    .ce(grp_fu_2028_ce),
    .dout(grp_fu_2028_p2)
);

convolve_fpga_mul_mul_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_mul_8ns_16s_16_4_1_U41(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2034_p0),
    .din1(and_ln703_7_fu_1659_p2),
    .ce(grp_fu_2034_ce),
    .dout(grp_fu_2034_p2)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U42(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2040_p0),
    .din1(and_ln703_fu_1690_p2),
    .din2(grp_fu_1962_p2),
    .ce(grp_fu_2040_ce),
    .dout(grp_fu_2040_p3)
);

convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16s_16_4_1_U43(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_fu_1690_p2),
    .din1(grp_fu_2048_p1),
    .din2(grp_fu_1968_p2),
    .ce(grp_fu_2048_ce),
    .dout(grp_fu_2048_p3)
);

convolve_fpga_mac_muladd_16s_8ns_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_16s_8ns_16s_16_4_1_U44(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(and_ln703_fu_1690_p2),
    .din1(grp_fu_2056_p1),
    .din2(grp_fu_1974_p2),
    .ce(grp_fu_2056_ce),
    .dout(grp_fu_2056_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U45(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2064_p0),
    .din1(and_ln703_3_fu_1708_p2),
    .din2(grp_fu_1980_p3),
    .ce(grp_fu_2064_ce),
    .dout(grp_fu_2064_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2072_p0),
    .din1(and_ln703_3_fu_1708_p2),
    .din2(grp_fu_1988_p3),
    .ce(grp_fu_2072_ce),
    .dout(grp_fu_2072_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2080_p0),
    .din1(and_ln703_5_fu_1723_p2),
    .din2(grp_fu_2004_p2),
    .ce(grp_fu_2080_ce),
    .dout(grp_fu_2080_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U48(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2088_p0),
    .din1(and_ln703_5_fu_1723_p2),
    .din2(grp_fu_2010_p2),
    .ce(grp_fu_2088_ce),
    .dout(grp_fu_2088_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U49(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2096_p0),
    .din1(and_ln703_5_fu_1723_p2),
    .din2(grp_fu_2016_p2),
    .ce(grp_fu_2096_ce),
    .dout(grp_fu_2096_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U50(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2104_p0),
    .din1(and_ln703_6_fu_1741_p2),
    .din2(grp_fu_2022_p2),
    .ce(grp_fu_2104_ce),
    .dout(grp_fu_2104_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U51(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2112_p0),
    .din1(and_ln703_6_fu_1741_p2),
    .din2(grp_fu_2028_p2),
    .ce(grp_fu_2112_ce),
    .dout(grp_fu_2112_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U52(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2120_p0),
    .din1(and_ln703_6_fu_1741_p2),
    .din2(grp_fu_2034_p2),
    .ce(grp_fu_2120_ce),
    .dout(grp_fu_2120_p3)
);

convolve_fpga_mac_muladd_8ns_16s_16s_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_16s_16s_16_4_1_U53(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2128_p0),
    .din1(and_ln703_3_reg_2744),
    .din2(add_ln703_20_reg_2875),
    .ce(grp_fu_2128_ce),
    .dout(grp_fu_2128_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state43)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter9 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln48_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state20) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state20);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln48_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp2_exit_iter0_state23) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state23)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state23);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            ap_enable_reg_pp2_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp3_exit_iter0_state27) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_subdone))) begin
            ap_enable_reg_pp3_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp3_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp3_exit_iter0_state27)) begin
                ap_enable_reg_pp3_iter1 <= (1'b1 ^ ap_condition_pp3_exit_iter0_state27);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp3_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp3_stage0_subdone)) begin
            ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            ap_enable_reg_pp3_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp4_flush_enable)) begin
            ap_enable_reg_pp4_iter0 <= 1'b0;
        end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
            ap_enable_reg_pp4_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
            ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
            ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
            ap_enable_reg_pp4_iter3 <= ap_enable_reg_pp4_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
            ap_enable_reg_pp4_iter4 <= ap_enable_reg_pp4_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp4_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
            ap_enable_reg_pp4_iter5 <= ap_enable_reg_pp4_iter4;
        end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
            ap_enable_reg_pp4_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_1_reg_2438 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        dec531_in_i_i_reg_463 <= add_ln35_reg_2320;
    end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        dec531_in_i_i_reg_463 <= elements_loc_read_reg_2145;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        i_1_reg_427 <= 31'd0;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln48_1_reg_2283 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        i_1_reg_427 <= add_ln48_reg_2287;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_415 <= 4'd0;
    end else if (((icmp_ln42_reg_2157 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_415 <= add_ln42_reg_2161;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ii_1_reg_451 <= 2'd0;
    end else if (((icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        ii_1_reg_451 <= add_ln61_reg_2305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        ii_reg_439 <= 31'd0;
    end else if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        ii_reg_439 <= add_ln55_reg_2296;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln70_1_reg_2438_pp4_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        insert_column_idx_reg_496 <= insert_column_idx_1_reg_2587;
    end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        insert_column_idx_reg_496 <= 32'd3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln70_1_reg_2438_pp4_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        insert_idx_reg_507 <= insert_idx_1_reg_2582;
    end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        insert_idx_reg_507 <= 32'd2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_1_reg_2438 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        j_reg_472 <= j_2_reg_2433;
    end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        j_reg_472 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp4_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
            reg_529 <= window_mem_0_q1;
        end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
            reg_529 <= window_mem_0_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp4_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
            reg_534 <= window_mem_1_q1;
        end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
            reg_534 <= window_mem_1_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp4_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
            reg_539 <= window_mem_2_q1;
        end else if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
            reg_539 <= window_mem_2_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_1_reg_2438 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        top_idx_1_reg_484 <= window_line_idx_reg_2428;
    end else if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        top_idx_1_reg_484 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        F2_reg_2204 <= F2_fu_651_p2;
        exp_tmp_V_reg_2187 <= {{ireg_fu_613_p1[62:52]}};
        gmem3_addr_read_reg_2166_pp0_iter2_reg <= gmem3_addr_read_reg_2166;
        gmem3_addr_read_reg_2166_pp0_iter3_reg <= gmem3_addr_read_reg_2166_pp0_iter2_reg;
        gmem3_addr_read_reg_2166_pp0_iter4_reg <= gmem3_addr_read_reg_2166_pp0_iter3_reg;
        gmem3_addr_read_reg_2166_pp0_iter5_reg <= gmem3_addr_read_reg_2166_pp0_iter4_reg;
        gmem3_addr_read_reg_2166_pp0_iter6_reg <= gmem3_addr_read_reg_2166_pp0_iter5_reg;
        gmem3_addr_read_reg_2166_pp0_iter7_reg <= gmem3_addr_read_reg_2166_pp0_iter6_reg;
        gmem3_addr_read_reg_2166_pp0_iter8_reg <= gmem3_addr_read_reg_2166_pp0_iter7_reg;
        i_reg_415_pp0_iter2_reg <= i_reg_415_pp0_iter1_reg;
        i_reg_415_pp0_iter3_reg <= i_reg_415_pp0_iter2_reg;
        i_reg_415_pp0_iter4_reg <= i_reg_415_pp0_iter3_reg;
        i_reg_415_pp0_iter5_reg <= i_reg_415_pp0_iter4_reg;
        i_reg_415_pp0_iter6_reg <= i_reg_415_pp0_iter5_reg;
        i_reg_415_pp0_iter7_reg <= i_reg_415_pp0_iter6_reg;
        i_reg_415_pp0_iter8_reg <= i_reg_415_pp0_iter7_reg;
        icmp_ln571_reg_2197 <= icmp_ln571_fu_646_p2;
        icmp_ln571_reg_2197_pp0_iter6_reg <= icmp_ln571_reg_2197;
        icmp_ln571_reg_2197_pp0_iter7_reg <= icmp_ln571_reg_2197_pp0_iter6_reg;
        icmp_ln571_reg_2197_pp0_iter8_reg <= icmp_ln571_reg_2197_pp0_iter7_reg;
        icmp_ln581_reg_2211 <= icmp_ln581_fu_667_p2;
        icmp_ln581_reg_2211_pp0_iter6_reg <= icmp_ln581_reg_2211;
        icmp_ln581_reg_2211_pp0_iter7_reg <= icmp_ln581_reg_2211_pp0_iter6_reg;
        icmp_ln581_reg_2211_pp0_iter8_reg <= icmp_ln581_reg_2211_pp0_iter7_reg;
        icmp_ln582_reg_2225_pp0_iter7_reg <= icmp_ln582_reg_2225;
        icmp_ln585_reg_2247_pp0_iter8_reg <= icmp_ln585_reg_2247;
        icmp_ln603_reg_2253_pp0_iter8_reg <= icmp_ln603_reg_2253;
        p_Result_3_reg_2182 <= ireg_fu_613_p1[32'd63];
        p_Result_3_reg_2182_pp0_iter5_reg <= p_Result_3_reg_2182;
        p_Result_3_reg_2182_pp0_iter6_reg <= p_Result_3_reg_2182_pp0_iter5_reg;
        sh_amt_reg_2218_pp0_iter7_reg <= sh_amt_reg_2218;
        sh_amt_reg_2218_pp0_iter8_reg <= sh_amt_reg_2218_pp0_iter7_reg;
        trunc_ln555_reg_2177 <= trunc_ln555_fu_617_p1;
        trunc_ln565_reg_2192 <= trunc_ln565_fu_639_p1;
        trunc_ln565_reg_2192_pp0_iter5_reg <= trunc_ln565_reg_2192;
        trunc_ln565_reg_2192_pp0_iter6_reg <= trunc_ln565_reg_2192_pp0_iter5_reg;
        trunc_ln583_reg_2241_pp0_iter8_reg <= trunc_ln583_reg_2241;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        add_ln35_reg_2320 <= add_ln35_fu_997_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln42_reg_2161 <= add_ln42_fu_603_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        add_ln48_reg_2287 <= add_ln48_fu_945_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        add_ln55_reg_2296 <= add_ln55_fu_961_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp3_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        add_ln61_reg_2305 <= add_ln61_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        add_ln703_11_reg_2910 <= grp_fu_2048_p3;
        add_ln703_13_reg_2915 <= grp_fu_2072_p3;
        add_ln703_16_reg_2920 <= grp_fu_2120_p3;
        add_ln703_17_reg_2925 <= grp_fu_2096_p3;
        add_ln703_19_reg_2930 <= grp_fu_2056_p3;
        add_ln703_1_reg_2885 <= grp_fu_2080_p3;
        add_ln703_3_reg_2890 <= grp_fu_2040_p3;
        add_ln703_5_reg_2895 <= grp_fu_2064_p3;
        add_ln703_8_reg_2900 <= grp_fu_2112_p3;
        add_ln703_9_reg_2905 <= grp_fu_2088_p3;
        add_ln703_reg_2880 <= grp_fu_2104_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
        add_ln703_15_reg_2940 <= add_ln703_15_fu_1777_p2;
        add_ln703_23_reg_2945 <= add_ln703_23_fu_1791_p2;
        add_ln703_7_reg_2935 <= add_ln703_7_fu_1763_p2;
        and_ln703_3_reg_2744 <= and_ln703_3_fu_1708_p2;
        and_ln75_1_reg_2385 <= and_ln75_1_fu_1079_p2;
        and_ln75_1_reg_2385_pp4_iter1_reg <= and_ln75_1_reg_2385;
        and_ln75_2_reg_2393 <= and_ln75_2_fu_1094_p2;
        and_ln75_reg_2362 <= and_ln75_fu_1057_p2;
        and_ln75_reg_2362_pp4_iter1_reg <= and_ln75_reg_2362;
        icmp_ln70_1_reg_2438 <= icmp_ln70_1_fu_1135_p2;
        icmp_ln70_1_reg_2438_pp4_iter1_reg <= icmp_ln70_1_reg_2438;
        lshr_ln75_1_reg_2550 <= {{select_ln75_6_fu_1293_p3[15:8]}};
        lshr_ln75_4_reg_2509 <= {{select_ln75_2_fu_1204_p3[15:8]}};
        lshr_ln75_s_reg_2535 <= {{select_ln75_5_fu_1258_p3[15:8]}};
        select_ln703_2_reg_2514 <= select_ln703_2_fu_1225_p3;
        select_ln81_reg_2416 <= select_ln81_fu_1105_p3;
        tmp_10_reg_2520 <= {{select_ln75_2_fu_1204_p3[23:16]}};
        tmp_13_reg_2540 <= {{select_ln75_5_fu_1258_p3[23:16]}};
        tmp_14_reg_2555 <= {{select_ln75_6_fu_1293_p3[23:16]}};
        trunc_ln75_13_reg_2530 <= trunc_ln75_13_fu_1265_p1;
        trunc_ln75_15_reg_2545 <= trunc_ln75_15_fu_1300_p1;
        trunc_ln75_6_reg_2504 <= trunc_ln75_6_fu_1211_p1;
        trunc_ln75_7_reg_2421 <= trunc_ln75_7_fu_1112_p1;
        trunc_ln75_7_reg_2421_pp4_iter1_reg <= trunc_ln75_7_reg_2421;
        trunc_ln850_1_reg_2962 <= {{add_ln703_15_fu_1777_p2[14:7]}};
        trunc_ln850_2_reg_2974 <= {{add_ln703_23_fu_1791_p2[14:7]}};
        trunc_ln851_1_reg_2969 <= trunc_ln851_1_fu_1821_p1;
        trunc_ln851_2_reg_2981 <= trunc_ln851_2_fu_1835_p1;
        trunc_ln851_reg_2957 <= trunc_ln851_fu_1807_p1;
        trunc_ln_reg_2950 <= {{add_ln703_7_fu_1763_p2[14:7]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
        add_ln703_20_reg_2875 <= grp_fu_1996_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        add_ln74_1_reg_2338 <= add_ln74_1_fu_1017_p2;
        add_ln74_2_reg_2345 <= add_ln74_2_fu_1023_p2;
        add_ln74_reg_2326 <= add_ln74_fu_1007_p2;
        add_ln81_reg_2350 <= add_ln81_fu_1029_p2;
        add_ln92_reg_2487 <= add_ln92_fu_1176_p2;
        add_ln95_reg_2493 <= add_ln95_fu_1182_p2;
        j_1_reg_2356 <= j_1_fu_1035_p2;
        lshr_ln75_6_reg_2663 <= {{select_ln75_3_fu_1539_p3[15:8]}};
        lshr_ln_reg_2597 <= {{select_ln75_fu_1420_p3[15:8]}};
        select_ln703_reg_2602 <= select_ln703_fu_1440_p3;
        select_ln81_1_reg_2478 <= select_ln81_1_fu_1157_p3;
        select_ln850_3_reg_2986 <= select_ln850_3_fu_1863_p3;
        select_ln850_4_reg_2991 <= select_ln850_4_fu_1894_p3;
        select_ln850_5_reg_2996 <= select_ln850_5_fu_1925_p3;
        tmp_11_reg_2668 <= {{select_ln75_3_fu_1539_p3[23:16]}};
        tmp_9_reg_2609 <= {{select_ln75_fu_1420_p3[23:16]}};
        trunc_ln75_2_reg_2592 <= trunc_ln75_2_fu_1426_p1;
        trunc_ln75_9_reg_2658 <= trunc_ln75_9_fu_1545_p1;
        trunc_ln75_reg_2332 <= trunc_ln75_fu_1013_p1;
        trunc_ln75_reg_2332_pp4_iter1_reg <= trunc_ln75_reg_2332;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_2197_pp0_iter7_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln581_reg_2263 <= and_ln581_fu_786_p2;
        or_ln582_reg_2258 <= or_ln582_fu_776_p2;
        select_ln585_reg_2268 <= select_ln585_fu_796_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_0 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_1 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_2 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_3 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_4 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_5 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_6 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (i_reg_415_pp0_iter8_reg == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_7 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_reg_415_pp0_iter8_reg == 4'd3) & ~(i_reg_415_pp0_iter8_reg == 4'd2) & ~(i_reg_415_pp0_iter8_reg == 4'd1) & ~(i_reg_415_pp0_iter8_reg == 4'd0) & ~(i_reg_415_pp0_iter8_reg == 4'd7) & ~(i_reg_415_pp0_iter8_reg == 4'd6) & ~(i_reg_415_pp0_iter8_reg == 4'd5) & ~(i_reg_415_pp0_iter8_reg == 4'd4) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        coef_V_8 <= select_ln571_fu_871_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_read_reg_2145 <= elements_loc_dout;
        gmem3_addr_reg_2151 <= sext_ln42_fu_587_p1;
        img_width_read_reg_2135 <= img_width_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem3_addr_read_reg_2166 <= m_axi_gmem3_RDATA;
        i_reg_415_pp0_iter1_reg <= i_reg_415;
        icmp_ln42_reg_2157 <= icmp_ln42_fu_597_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln48_1_reg_2283 <= icmp_ln48_1_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln55_reg_2292 <= icmp_ln55_fu_956_p2;
        icmp_ln55_reg_2292_pp2_iter1_reg <= icmp_ln55_reg_2292;
        ii_reg_439_pp2_iter1_reg <= ii_reg_439;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_2197 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln582_reg_2225 <= icmp_ln582_fu_690_p2;
        sh_amt_reg_2218 <= sh_amt_fu_683_p3;
        tmp_20_reg_2231 <= {{sh_amt_fu_683_p3[11:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln571_reg_2197_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln585_reg_2247 <= icmp_ln585_fu_733_p2;
        icmp_ln603_reg_2253 <= icmp_ln603_fu_738_p2;
        select_ln570_reg_2236 <= select_ln570_fu_722_p3;
        trunc_ln583_reg_2241 <= trunc_ln583_fu_729_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001))) begin
        icmp_ln61_reg_2301 <= icmp_ln61_fu_972_p2;
        icmp_ln61_reg_2301_pp3_iter1_reg <= icmp_ln61_reg_2301;
        ii_1_reg_451_pp3_iter1_reg <= ii_1_reg_451;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
        insert_column_idx_1_reg_2587 <= insert_column_idx_1_fu_1413_p3;
        insert_idx_1_reg_2582 <= insert_idx_1_fu_1405_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
        j_2_reg_2433 <= j_2_fu_1128_p3;
        window_line_idx_reg_2428 <= window_line_idx_fu_1120_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)) | ((icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_522 <= read_stream_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        sext_ln70_reg_2314 <= sext_ln70_fu_994_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln48_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        trunc_ln48_reg_2277 <= trunc_ln48_fu_937_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln75_reg_2362) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001))) begin
        trunc_ln75_1_reg_2499 <= trunc_ln75_1_fu_1188_p1;
        trunc_ln75_8_reg_2525 <= trunc_ln75_8_fu_1242_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001))) begin
        window_mem_0_load_2_reg_2457 <= window_mem_0_q1;
        window_mem_1_load_2_reg_2464 <= window_mem_1_q1;
        window_mem_2_load_2_reg_2471 <= window_mem_2_q1;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_597_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln48_1_fu_940_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state20 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state20 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln55_fu_956_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state23 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state23 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln61_fu_972_p2 == 1'd1)) begin
        ap_condition_pp3_exit_iter0_state27 = 1'b1;
    end else begin
        ap_condition_pp3_exit_iter0_state27 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_1_fu_1135_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
        ap_condition_pp4_flush_enable = 1'b1;
    end else begin
        ap_condition_pp4_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp3_iter2 == 1'b0) & (ap_enable_reg_pp3_iter0 == 1'b0) & (ap_enable_reg_pp3_iter1 == 1'b0))) begin
        ap_idle_pp3 = 1'b1;
    end else begin
        ap_idle_pp3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b0) & (ap_enable_reg_pp4_iter4 == 1'b0) & (ap_enable_reg_pp4_iter3 == 1'b0) & (ap_enable_reg_pp4_iter1 == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b0))) begin
        ap_idle_pp4 = 1'b1;
    end else begin
        ap_idle_pp4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_1_reg_2438 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_dec531_in_i_i_phi_fu_466_p4 = add_ln35_reg_2320;
    end else begin
        ap_phi_mux_dec531_in_i_i_phi_fu_466_p4 = dec531_in_i_i_reg_463;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln48_1_reg_2283 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_1_phi_fu_431_p4 = add_ln48_reg_2287;
    end else begin
        ap_phi_mux_i_1_phi_fu_431_p4 = i_1_reg_427;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_2157 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_i_phi_fu_419_p4 = add_ln42_reg_2161;
    end else begin
        ap_phi_mux_i_phi_fu_419_p4 = i_reg_415;
    end
end

always @ (*) begin
    if (((icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0))) begin
        ap_phi_mux_ii_1_phi_fu_455_p4 = add_ln61_reg_2305;
    end else begin
        ap_phi_mux_ii_1_phi_fu_455_p4 = ii_1_reg_451;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        ap_phi_mux_ii_phi_fu_443_p4 = add_ln55_reg_2296;
    end else begin
        ap_phi_mux_ii_phi_fu_443_p4 = ii_reg_439;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln70_1_reg_2438_pp4_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_insert_column_idx_phi_fu_500_p4 = insert_column_idx_1_reg_2587;
    end else begin
        ap_phi_mux_insert_column_idx_phi_fu_500_p4 = insert_column_idx_reg_496;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (icmp_ln70_1_reg_2438_pp4_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_insert_idx_phi_fu_511_p4 = insert_idx_1_reg_2582;
    end else begin
        ap_phi_mux_insert_idx_phi_fu_511_p4 = insert_idx_reg_507;
    end
end

always @ (*) begin
    if (((icmp_ln70_1_reg_2438 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_j_phi_fu_476_p4 = j_2_reg_2433;
    end else begin
        ap_phi_mux_j_phi_fu_476_p4 = j_reg_472;
    end
end

always @ (*) begin
    if (((icmp_ln70_1_reg_2438 == 1'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        ap_phi_mux_top_idx_1_phi_fu_488_p4 = window_line_idx_reg_2428;
    end else begin
        ap_phi_mux_top_idx_1_phi_fu_488_p4 = top_idx_1_reg_484;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        coefficient_blk_n = coefficient_empty_n;
    end else begin
        coefficient_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        coefficient_read = 1'b1;
    end else begin
        coefficient_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_blk_n = elements_loc_empty_n;
    end else begin
        elements_loc_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_out_blk_n = elements_loc_out_full_n;
    end else begin
        elements_loc_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_out_write = 1'b1;
    end else begin
        elements_loc_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        elements_loc_read = 1'b1;
    end else begin
        elements_loc_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem3_blk_n_AR = m_axi_gmem3_ARREADY;
    end else begin
        gmem3_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        gmem3_blk_n_R = m_axi_gmem3_RVALID;
    end else begin
        gmem3_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1944_ce = 1'b1;
    end else begin
        grp_fu_1944_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1950_ce = 1'b1;
    end else begin
        grp_fu_1950_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1956_ce = 1'b1;
    end else begin
        grp_fu_1956_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1962_ce = 1'b1;
    end else begin
        grp_fu_1962_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1968_ce = 1'b1;
    end else begin
        grp_fu_1968_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1974_ce = 1'b1;
    end else begin
        grp_fu_1974_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1980_ce = 1'b1;
    end else begin
        grp_fu_1980_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1988_ce = 1'b1;
    end else begin
        grp_fu_1988_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_1996_ce = 1'b1;
    end else begin
        grp_fu_1996_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2004_ce = 1'b1;
    end else begin
        grp_fu_2004_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2010_ce = 1'b1;
    end else begin
        grp_fu_2010_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2016_ce = 1'b1;
    end else begin
        grp_fu_2016_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2022_ce = 1'b1;
    end else begin
        grp_fu_2022_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2028_ce = 1'b1;
    end else begin
        grp_fu_2028_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2034_ce = 1'b1;
    end else begin
        grp_fu_2034_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2040_ce = 1'b1;
    end else begin
        grp_fu_2040_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2048_ce = 1'b1;
    end else begin
        grp_fu_2048_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2056_ce = 1'b1;
    end else begin
        grp_fu_2056_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2064_ce = 1'b1;
    end else begin
        grp_fu_2064_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2072_ce = 1'b1;
    end else begin
        grp_fu_2072_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2080_ce = 1'b1;
    end else begin
        grp_fu_2080_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2088_ce = 1'b1;
    end else begin
        grp_fu_2088_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2096_ce = 1'b1;
    end else begin
        grp_fu_2096_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2104_ce = 1'b1;
    end else begin
        grp_fu_2104_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2112_ce = 1'b1;
    end else begin
        grp_fu_2112_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2120_ce = 1'b1;
    end else begin
        grp_fu_2120_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        grp_fu_2128_ce = 1'b1;
    end else begin
        grp_fu_2128_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_519_ce = 1'b1;
    end else begin
        grp_fu_519_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        grp_fu_555_p4 = trunc_ln75_7_reg_2421_pp4_iter1_reg;
    end else if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        grp_fu_555_p4 = trunc_ln75_7_reg_2421;
    end else begin
        grp_fu_555_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_blk_n = img_width_empty_n;
    end else begin
        img_width_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_width_read = 1'b1;
    end else begin
        img_width_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem3_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem3_ARVALID = 1'b1;
    end else begin
        m_axi_gmem3_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_gmem3_RREADY = 1'b1;
    end else begin
        m_axi_gmem3_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1)) | ((icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0)))) begin
        read_stream_blk_n = read_stream_empty_n;
    end else begin
        read_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)) | ((icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp3_stage0) & (1'b0 == ap_block_pp3_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        read_stream_read = 1'b1;
    end else begin
        read_stream_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_0_address0 = zext_ln92_fu_1165_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        window_mem_0_address0 = zext_ln75_fu_1041_p1;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        window_mem_0_address0 = i_1_cast_i_i_fu_951_p1;
    end else begin
        window_mem_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_0_address1 = zext_ln72_fu_1140_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        window_mem_0_address1 = zext_ln75_1_fu_1063_p1;
    end else begin
        window_mem_0_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        window_mem_0_ce0 = 1'b1;
    end else begin
        window_mem_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        window_mem_0_ce1 = 1'b1;
    end else begin
        window_mem_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_0_d0 = reg_522;
    end else if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        window_mem_0_d0 = 32'd0;
    end else begin
        window_mem_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp1_iter1 == 1'b1) & (icmp_ln48_1_reg_2283 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (trunc_ln92_fu_1172_p1 == 2'd0)))) begin
        window_mem_0_we0 = 1'b1;
    end else begin
        window_mem_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_1_address0 = zext_ln92_fu_1165_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        window_mem_1_address0 = zext_ln75_fu_1041_p1;
    end else if (((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0))) begin
        window_mem_1_address0 = ii_cast_i_i_fu_967_p1;
    end else begin
        window_mem_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_1_address1 = zext_ln72_fu_1140_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        window_mem_1_address1 = zext_ln75_1_fu_1063_p1;
    end else begin
        window_mem_1_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        window_mem_1_ce0 = 1'b1;
    end else begin
        window_mem_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        window_mem_1_ce1 = 1'b1;
    end else begin
        window_mem_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (icmp_ln55_reg_2292_pp2_iter1_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001) & (trunc_ln92_fu_1172_p1 == 2'd1)))) begin
        window_mem_1_we0 = 1'b1;
    end else begin
        window_mem_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_2_address0 = zext_ln92_fu_1165_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        window_mem_2_address0 = zext_ln75_fu_1041_p1;
    end else if (((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0))) begin
        window_mem_2_address0 = ii_1_cast_i_i_fu_984_p1;
    end else begin
        window_mem_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0))) begin
        window_mem_2_address1 = zext_ln72_fu_1140_p1;
    end else if (((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1))) begin
        window_mem_2_address1 = zext_ln75_1_fu_1063_p1;
    end else begin
        window_mem_2_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (1'b0 == ap_block_pp3_stage0_11001)) | ((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        window_mem_2_ce0 = 1'b1;
    end else begin
        window_mem_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)) | ((ap_enable_reg_pp4_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001)))) begin
        window_mem_2_ce1 = 1'b1;
    end else begin
        window_mem_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (icmp_ln61_reg_2301_pp3_iter1_reg == 1'd0) & (1'b0 == ap_block_pp3_stage0_11001)) | (~(trunc_ln92_fu_1172_p1 == 2'd1) & ~(trunc_ln92_fu_1172_p1 == 2'd0) & (ap_enable_reg_pp4_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp4_stage0) & (1'b0 == ap_block_pp4_stage0_11001)))) begin
        window_mem_2_we0 = 1'b1;
    end else begin
        window_mem_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
        write_stream_blk_n = write_stream_full_n;
    end else begin
        write_stream_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_11001) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
        write_stream_write = 1'b1;
    end else begin
        write_stream_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem3_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln42_fu_597_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_enable_reg_pp0_iter8 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln42_fu_597_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((icmp_ln48_fu_932_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln48_1_fu_940_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln48_1_fu_940_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln55_fu_956_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) & ~((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter2 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (icmp_ln55_fu_956_p2 == 1'd1) & (ap_enable_reg_pp2_iter1 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_pp3_stage0;
        end
        ap_ST_fsm_pp3_stage0 : begin
            if ((~((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln61_fu_972_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) & ~((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end else if ((((ap_enable_reg_pp3_iter2 == 1'b1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)) | ((ap_enable_reg_pp3_iter0 == 1'b1) & (icmp_ln61_fu_972_p2 == 1'd1) & (ap_enable_reg_pp3_iter1 == 1'b0) & (1'b0 == ap_block_pp3_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp3_stage0;
            end
        end
        ap_ST_fsm_state30 : begin
            if (((icmp_ln70_fu_989_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_pp4_stage0 : begin
            if ((1'b0 == ap_block_pp4_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end
        end
        ap_ST_fsm_pp4_stage1 : begin
            if ((~((ap_enable_reg_pp4_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone) & (ap_enable_reg_pp4_iter5 == 1'b1)) & (1'b0 == ap_block_pp4_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage0;
            end else if (((ap_enable_reg_pp4_iter4 == 1'b0) & (1'b1 == ap_CS_fsm_pp4_stage1) & (1'b0 == ap_block_pp4_stage1_subdone) & (ap_enable_reg_pp4_iter5 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp4_stage1;
            end
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_651_p2 = (12'd1075 - zext_ln455_fu_643_p1);

assign add_ln35_fu_997_p2 = ($signed(32'd4294967295) + $signed(ap_phi_mux_dec531_in_i_i_phi_fu_466_p4));

assign add_ln42_fu_603_p2 = (ap_phi_mux_i_phi_fu_419_p4 + 4'd1);

assign add_ln48_fu_945_p2 = (ap_phi_mux_i_1_phi_fu_431_p4 + 31'd1);

assign add_ln55_fu_961_p2 = (ap_phi_mux_ii_phi_fu_443_p4 + 31'd1);

assign add_ln581_fu_673_p2 = ($signed(12'd4089) + $signed(F2_reg_2204));

assign add_ln61_fu_978_p2 = (ap_phi_mux_ii_1_phi_fu_455_p4 + 2'd1);

assign add_ln695_1_fu_1882_p2 = (8'd1 + trunc_ln850_1_reg_2962);

assign add_ln695_2_fu_1913_p2 = (8'd1 + trunc_ln850_2_reg_2974);

assign add_ln695_fu_1851_p2 = (8'd1 + trunc_ln_reg_2950);

assign add_ln703_10_fu_1769_p2 = ($signed(add_ln703_8_reg_2900) + $signed(add_ln703_9_reg_2905));

assign add_ln703_14_fu_1773_p2 = ($signed(add_ln703_11_reg_2910) + $signed(add_ln703_13_reg_2915));

assign add_ln703_15_fu_1777_p2 = (add_ln703_10_fu_1769_p2 + add_ln703_14_fu_1773_p2);

assign add_ln703_18_fu_1783_p2 = ($signed(add_ln703_16_reg_2920) + $signed(add_ln703_17_reg_2925));

assign add_ln703_22_fu_1787_p2 = ($signed(add_ln703_19_reg_2930) + $signed(grp_fu_2128_p3));

assign add_ln703_23_fu_1791_p2 = (add_ln703_18_fu_1783_p2 + add_ln703_22_fu_1787_p2);

assign add_ln703_2_fu_1755_p2 = ($signed(add_ln703_reg_2880) + $signed(add_ln703_1_reg_2885));

assign add_ln703_6_fu_1759_p2 = ($signed(add_ln703_3_reg_2890) + $signed(add_ln703_5_reg_2895));

assign add_ln703_7_fu_1763_p2 = (add_ln703_2_fu_1755_p2 + add_ln703_6_fu_1759_p2);

assign add_ln74_1_fu_1017_p2 = ($signed(33'd1) + $signed(j_cast_i_i_fu_1003_p1));

assign add_ln74_2_fu_1023_p2 = ($signed(33'd2) + $signed(j_cast_i_i_fu_1003_p1));

assign add_ln74_fu_1007_p2 = ($signed(33'd8589934591) + $signed(j_cast_i_i_fu_1003_p1));

assign add_ln81_1_fu_1152_p2 = (2'd1 + trunc_ln75_7_reg_2421);

assign add_ln81_fu_1029_p2 = (32'd1 + ap_phi_mux_top_idx_1_phi_fu_488_p4);

assign add_ln92_fu_1176_p2 = (ap_phi_mux_insert_column_idx_phi_fu_500_p4 + 32'd1);

assign add_ln95_fu_1182_p2 = (ap_phi_mux_insert_idx_phi_fu_511_p4 + 32'd1);

assign and_ln581_fu_786_p2 = (xor_ln582_fu_780_p2 & icmp_ln581_reg_2211_pp0_iter7_reg);

assign and_ln582_fu_764_p2 = (xor_ln571_fu_759_p2 & icmp_ln582_reg_2225_pp0_iter7_reg);

assign and_ln585_1_fu_836_p2 = (xor_ln585_fu_831_p2 & and_ln581_reg_2263);

assign and_ln585_fu_791_p2 = (icmp_ln585_reg_2247 & and_ln581_fu_786_p2);

assign and_ln603_fu_858_p2 = (xor_ln581_fu_852_p2 & icmp_ln603_reg_2253_pp0_iter8_reg);

assign and_ln703_1_fu_1497_p2 = (select_ln703_1_fu_1490_p3 & coef_V_1);

assign and_ln703_2_fu_1528_p2 = (select_ln703_2_reg_2514 & coef_V_2);

assign and_ln703_3_fu_1708_p2 = (select_ln703_reg_2602 & coef_V_3);

assign and_ln703_4_fu_1602_p2 = (select_ln703_1_fu_1490_p3 & coef_V_4);

assign and_ln703_5_fu_1723_p2 = (select_ln703_2_reg_2514 & coef_V_5);

assign and_ln703_6_fu_1741_p2 = (select_ln703_reg_2602 & coef_V_6);

assign and_ln703_7_fu_1659_p2 = (select_ln703_1_fu_1490_p3 & coef_V_7);

assign and_ln703_8_fu_1365_p2 = (select_ln703_2_fu_1225_p3 & coef_V_8);

assign and_ln703_fu_1690_p2 = (select_ln703_reg_2602 & coef_V_0);

assign and_ln75_1_fu_1079_p2 = (icmp_ln75_3_fu_1074_p2 & icmp_ln75_2_fu_1069_p2);

assign and_ln75_2_fu_1094_p2 = (icmp_ln75_5_fu_1090_p2 & icmp_ln75_4_fu_1085_p2);

assign and_ln75_fu_1057_p2 = (icmp_ln75_fu_1047_p2 & icmp_ln75_1_fu_1053_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp3_stage0 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp4_stage0 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp4_stage1 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_gmem3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_gmem3_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp2_stage0_11001 = ((read_stream_empty_n == 1'b0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp2_stage0_subdone = ((read_stream_empty_n == 1'b0) & (icmp_ln55_reg_2292 == 1'd0) & (ap_enable_reg_pp2_iter1 == 1'b1));
end

assign ap_block_pp3_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp3_stage0_11001 = ((read_stream_empty_n == 1'b0) & (icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp3_stage0_subdone = ((read_stream_empty_n == 1'b0) & (icmp_ln61_reg_2301 == 1'd0) & (ap_enable_reg_pp3_iter1 == 1'b1));
end

assign ap_block_pp4_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp4_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp4_stage1_01001 = (((write_stream_full_n == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((read_stream_empty_n == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage1_11001 = (((write_stream_full_n == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((read_stream_empty_n == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp4_stage1_subdone = (((write_stream_full_n == 1'b0) & (ap_enable_reg_pp4_iter5 == 1'b1)) | ((read_stream_empty_n == 1'b0) & (ap_enable_reg_pp4_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0) | (elements_loc_out_full_n == 1'b0) | (elements_loc_empty_n == 1'b0) | (img_width_empty_n == 1'b0) | (coefficient_empty_n == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_gmem3_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state24_pp2_stage0_iter1 = ((read_stream_empty_n == 1'b0) & (icmp_ln55_reg_2292 == 1'd0));
end

assign ap_block_state25_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp3_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state28_pp3_stage0_iter1 = ((read_stream_empty_n == 1'b0) & (icmp_ln61_reg_2301 == 1'd0));
end

assign ap_block_state29_pp3_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp4_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state32_pp4_stage1_iter0 = (read_stream_empty_n == 1'b0);
end

assign ap_block_state33_pp4_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp4_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp4_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp4_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp4_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp4_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp4_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp4_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp4_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state42_pp4_stage1_iter5 = (write_stream_full_n == 1'b0);
end

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign ap_enable_pp3 = (ap_idle_pp3 ^ 1'b1);

assign ap_enable_pp4 = (ap_idle_pp4 ^ 1'b1);

assign ashr_ln586_fu_750_p2 = $signed(select_ln570_reg_2236) >>> zext_ln586_fu_746_p1;

assign elements_loc_out_din = elements_loc_dout;

assign grp_fu_1944_p0 = grp_fu_1944_p00;

assign grp_fu_1944_p00 = trunc_ln75_19_fu_1343_p1;

assign grp_fu_1950_p1 = grp_fu_1950_p10;

assign grp_fu_1950_p10 = lshr_ln75_5_fu_1347_p4;

assign grp_fu_1956_p1 = grp_fu_1956_p10;

assign grp_fu_1956_p10 = tmp_16_fu_1375_p4;

assign grp_fu_1962_p0 = grp_fu_1962_p00;

assign grp_fu_1962_p00 = trunc_ln75_4_fu_1468_p1;

assign grp_fu_1968_p1 = grp_fu_1968_p10;

assign grp_fu_1968_p10 = lshr_ln75_2_fu_1472_p4;

assign grp_fu_1974_p1 = grp_fu_1974_p10;

assign grp_fu_1974_p10 = tmp_s_fu_1507_p4;

assign grp_fu_1980_p0 = grp_fu_1980_p00;

assign grp_fu_1980_p00 = trunc_ln75_6_reg_2504;

assign grp_fu_1988_p1 = grp_fu_1988_p10;

assign grp_fu_1988_p10 = lshr_ln75_4_reg_2509;

assign grp_fu_1996_p1 = grp_fu_1996_p10;

assign grp_fu_1996_p10 = tmp_10_reg_2520;

assign grp_fu_2004_p0 = grp_fu_2004_p00;

assign grp_fu_2004_p00 = trunc_ln75_11_fu_1580_p1;

assign grp_fu_2010_p0 = grp_fu_2010_p00;

assign grp_fu_2010_p00 = lshr_ln75_8_fu_1584_p4;

assign grp_fu_2016_p0 = grp_fu_2016_p00;

assign grp_fu_2016_p00 = tmp_12_fu_1612_p4;

assign grp_fu_2022_p0 = grp_fu_2022_p00;

assign grp_fu_2022_p00 = trunc_ln75_17_fu_1637_p1;

assign grp_fu_2028_p0 = grp_fu_2028_p00;

assign grp_fu_2028_p00 = lshr_ln75_3_fu_1641_p4;

assign grp_fu_2034_p0 = grp_fu_2034_p00;

assign grp_fu_2034_p00 = tmp_15_fu_1669_p4;

assign grp_fu_2040_p0 = grp_fu_2040_p00;

assign grp_fu_2040_p00 = trunc_ln75_2_reg_2592;

assign grp_fu_2048_p1 = grp_fu_2048_p10;

assign grp_fu_2048_p10 = lshr_ln_reg_2597;

assign grp_fu_2056_p1 = grp_fu_2056_p10;

assign grp_fu_2056_p10 = tmp_9_reg_2609;

assign grp_fu_2064_p0 = grp_fu_2064_p00;

assign grp_fu_2064_p00 = trunc_ln75_9_reg_2658;

assign grp_fu_2072_p0 = grp_fu_2072_p00;

assign grp_fu_2072_p00 = lshr_ln75_6_reg_2663;

assign grp_fu_2080_p0 = grp_fu_2080_p00;

assign grp_fu_2080_p00 = trunc_ln75_13_reg_2530;

assign grp_fu_2088_p0 = grp_fu_2088_p00;

assign grp_fu_2088_p00 = lshr_ln75_s_reg_2535;

assign grp_fu_2096_p0 = grp_fu_2096_p00;

assign grp_fu_2096_p00 = tmp_13_reg_2540;

assign grp_fu_2104_p0 = grp_fu_2104_p00;

assign grp_fu_2104_p00 = trunc_ln75_15_reg_2545;

assign grp_fu_2112_p0 = grp_fu_2112_p00;

assign grp_fu_2112_p00 = lshr_ln75_1_reg_2550;

assign grp_fu_2120_p0 = grp_fu_2120_p00;

assign grp_fu_2120_p00 = tmp_14_reg_2555;

assign grp_fu_2128_p0 = grp_fu_2128_p00;

assign grp_fu_2128_p00 = tmp_11_reg_2668;

assign grp_fu_519_p0 = gmem3_addr_read_reg_2166;

assign i_1_cast_i_i_fu_951_p1 = i_1_reg_427;

assign icmp_ln42_fu_597_p2 = ((ap_phi_mux_i_phi_fu_419_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln48_1_fu_940_p2 = ((ap_phi_mux_i_1_phi_fu_431_p4 == trunc_ln48_reg_2277) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_932_p2 = (($signed(img_width_read_reg_2135) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_956_p2 = ((ap_phi_mux_ii_phi_fu_443_p4 == trunc_ln48_reg_2277) ? 1'b1 : 1'b0);

assign icmp_ln571_fu_646_p2 = ((trunc_ln555_reg_2177 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_667_p2 = (($signed(tmp_19_fu_657_p4) > $signed(9'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_690_p2 = ((F2_reg_2204 == 12'd7) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_733_p2 = ((sh_amt_reg_2218 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_738_p2 = ((tmp_20_reg_2231 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln61_fu_972_p2 = ((ap_phi_mux_ii_1_phi_fu_455_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln70_1_fu_1135_p2 = ((add_ln35_reg_2320 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_989_p2 = ((elements_loc_read_reg_2145 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_1_fu_1053_p2 = (($signed(add_ln74_reg_2326) < $signed(sext_ln70_reg_2314)) ? 1'b1 : 1'b0);

assign icmp_ln75_2_fu_1069_p2 = (($signed(add_ln74_1_reg_2338) > $signed(33'd0)) ? 1'b1 : 1'b0);

assign icmp_ln75_3_fu_1074_p2 = (($signed(j_reg_472) < $signed(img_width_read_reg_2135)) ? 1'b1 : 1'b0);

assign icmp_ln75_4_fu_1085_p2 = (($signed(add_ln74_2_reg_2345) > $signed(33'd0)) ? 1'b1 : 1'b0);

assign icmp_ln75_5_fu_1090_p2 = (($signed(add_ln74_1_reg_2338) < $signed(sext_ln70_reg_2314)) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_1047_p2 = (($signed(j_reg_472) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln81_1_fu_1147_p2 = ((select_ln81_reg_2416 == 32'd2) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_1100_p2 = ((add_ln81_reg_2350 == 32'd3) ? 1'b1 : 1'b0);

assign icmp_ln851_1_fu_1877_p2 = ((trunc_ln851_1_reg_2969 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_2_fu_1908_p2 = ((trunc_ln851_2_reg_2981 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln851_fu_1846_p2 = ((trunc_ln851_reg_2957 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_1116_p2 = (($signed(j_1_reg_2356) < $signed(img_width_read_reg_2135)) ? 1'b1 : 1'b0);

assign icmp_ln93_fu_1389_p2 = (($signed(add_ln92_reg_2487) < $signed(img_width_read_reg_2135)) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_1393_p2 = ((add_ln95_reg_2493 == 32'd3) ? 1'b1 : 1'b0);

assign ii_1_cast_i_i_fu_984_p1 = ii_1_reg_451_pp3_iter1_reg;

assign ii_cast_i_i_fu_967_p1 = ii_reg_439_pp2_iter1_reg;

assign insert_column_idx_1_fu_1413_p3 = ((icmp_ln93_fu_1389_p2[0:0] === 1'b1) ? add_ln92_reg_2487 : 32'd0);

assign insert_idx_1_fu_1405_p3 = ((icmp_ln93_fu_1389_p2[0:0] === 1'b1) ? insert_idx_reg_507 : select_ln95_fu_1398_p3);

assign ireg_fu_613_p1 = grp_fu_519_p1;

assign j_1_fu_1035_p2 = ($signed(32'd1) + $signed(ap_phi_mux_j_phi_fu_476_p4));

assign j_2_fu_1128_p3 = ((icmp_ln87_fu_1116_p2[0:0] === 1'b1) ? j_1_reg_2356 : 32'd0);

assign j_cast_i_i_fu_1003_p1 = ap_phi_mux_j_phi_fu_476_p4;

assign lshr_ln75_2_fu_1472_p4 = {{select_ln75_1_fu_1461_p3[15:8]}};

assign lshr_ln75_3_fu_1641_p4 = {{select_ln75_7_fu_1630_p3[15:8]}};

assign lshr_ln75_5_fu_1347_p4 = {{select_ln75_8_fu_1336_p3[15:8]}};

assign lshr_ln75_8_fu_1584_p4 = {{select_ln75_4_fu_1573_p3[15:8]}};

assign m_axi_gmem3_ARADDR = gmem3_addr_reg_2151;

assign m_axi_gmem3_ARBURST = 2'd0;

assign m_axi_gmem3_ARCACHE = 4'd0;

assign m_axi_gmem3_ARID = 1'd0;

assign m_axi_gmem3_ARLEN = 32'd9;

assign m_axi_gmem3_ARLOCK = 2'd0;

assign m_axi_gmem3_ARPROT = 3'd0;

assign m_axi_gmem3_ARQOS = 4'd0;

assign m_axi_gmem3_ARREGION = 4'd0;

assign m_axi_gmem3_ARSIZE = 3'd0;

assign m_axi_gmem3_ARUSER = 1'd0;

assign m_axi_gmem3_AWADDR = 64'd0;

assign m_axi_gmem3_AWBURST = 2'd0;

assign m_axi_gmem3_AWCACHE = 4'd0;

assign m_axi_gmem3_AWID = 1'd0;

assign m_axi_gmem3_AWLEN = 32'd0;

assign m_axi_gmem3_AWLOCK = 2'd0;

assign m_axi_gmem3_AWPROT = 3'd0;

assign m_axi_gmem3_AWQOS = 4'd0;

assign m_axi_gmem3_AWREGION = 4'd0;

assign m_axi_gmem3_AWSIZE = 3'd0;

assign m_axi_gmem3_AWUSER = 1'd0;

assign m_axi_gmem3_AWVALID = 1'b0;

assign m_axi_gmem3_BREADY = 1'b0;

assign m_axi_gmem3_WDATA = 32'd0;

assign m_axi_gmem3_WID = 1'd0;

assign m_axi_gmem3_WLAST = 1'b0;

assign m_axi_gmem3_WSTRB = 4'd0;

assign m_axi_gmem3_WUSER = 1'd0;

assign m_axi_gmem3_WVALID = 1'b0;

assign man_V_1_fu_716_p2 = (54'd0 - zext_ln569_fu_712_p1);

assign or_ln581_fu_848_p2 = (or_ln582_reg_2258 | icmp_ln581_reg_2211_pp0_iter8_reg);

assign or_ln582_fu_776_p2 = (icmp_ln582_reg_2225_pp0_iter7_reg | icmp_ln571_reg_2197_pp0_iter7_reg);

assign p_Result_1_fu_1870_p3 = add_ln703_15_reg_2940[32'd15];

assign p_Result_2_fu_1901_p3 = add_ln703_23_reg_2945[32'd15];

assign p_Result_4_fu_705_p3 = {{1'd1}, {trunc_ln565_reg_2192_pp0_iter6_reg}};

assign p_Result_s_fu_1839_p3 = add_ln703_7_reg_2935[32'd15];

assign select_ln570_fu_722_p3 = ((p_Result_3_reg_2182_pp0_iter6_reg[0:0] === 1'b1) ? man_V_1_fu_716_p2 : zext_ln569_fu_712_p1);

assign select_ln571_fu_871_p3 = ((icmp_ln571_reg_2197_pp0_iter8_reg[0:0] === 1'b1) ? 16'd0 : select_ln603_fu_863_p3);

assign select_ln582_fu_769_p3 = ((and_ln582_fu_764_p2[0:0] === 1'b1) ? trunc_ln583_reg_2241 : 16'd0);

assign select_ln585_1_fu_841_p3 = ((and_ln585_1_fu_836_p2[0:0] === 1'b1) ? select_ln588_fu_814_p3 : select_ln585_reg_2268);

assign select_ln585_fu_796_p3 = ((and_ln585_fu_791_p2[0:0] === 1'b1) ? trunc_ln586_1_fu_755_p1 : select_ln582_fu_769_p3);

assign select_ln588_fu_814_p3 = ((tmp_21_fu_807_p3[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln603_fu_863_p3 = ((and_ln603_fu_858_p2[0:0] === 1'b1) ? shl_ln604_fu_826_p2 : select_ln585_1_fu_841_p3);

assign select_ln703_1_fu_1490_p3 = ((and_ln75_1_reg_2385_pp4_iter1_reg[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln703_2_fu_1225_p3 = ((and_ln75_2_reg_2393[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln703_fu_1440_p3 = ((and_ln75_reg_2362_pp4_iter1_reg[0:0] === 1'b1) ? 16'd65535 : 16'd0);

assign select_ln75_1_fu_1461_p3 = ((and_ln75_1_reg_2385_pp4_iter1_reg[0:0] === 1'b1) ? trunc_ln75_3_fu_1457_p1 : 24'd0);

assign select_ln75_2_fu_1204_p3 = ((and_ln75_2_reg_2393[0:0] === 1'b1) ? trunc_ln75_5_fu_1200_p1 : 24'd0);

assign select_ln75_3_fu_1539_p3 = ((and_ln75_reg_2362_pp4_iter1_reg[0:0] === 1'b1) ? trunc_ln75_8_reg_2525 : 24'd0);

assign select_ln75_4_fu_1573_p3 = ((and_ln75_1_reg_2385_pp4_iter1_reg[0:0] === 1'b1) ? trunc_ln75_10_fu_1569_p1 : 24'd0);

assign select_ln75_5_fu_1258_p3 = ((and_ln75_2_reg_2393[0:0] === 1'b1) ? trunc_ln75_12_fu_1254_p1 : 24'd0);

assign select_ln75_6_fu_1293_p3 = ((and_ln75_reg_2362[0:0] === 1'b1) ? trunc_ln75_14_fu_1289_p1 : 24'd0);

assign select_ln75_7_fu_1630_p3 = ((and_ln75_1_reg_2385_pp4_iter1_reg[0:0] === 1'b1) ? trunc_ln75_16_fu_1626_p1 : 24'd0);

assign select_ln75_8_fu_1336_p3 = ((and_ln75_2_reg_2393[0:0] === 1'b1) ? trunc_ln75_18_fu_1332_p1 : 24'd0);

assign select_ln75_fu_1420_p3 = ((and_ln75_reg_2362_pp4_iter1_reg[0:0] === 1'b1) ? trunc_ln75_1_reg_2499 : 24'd0);

assign select_ln81_1_fu_1157_p3 = ((icmp_ln81_1_fu_1147_p2[0:0] === 1'b1) ? 2'd0 : add_ln81_1_fu_1152_p2);

assign select_ln81_fu_1105_p3 = ((icmp_ln81_fu_1100_p2[0:0] === 1'b1) ? 32'd0 : add_ln81_reg_2350);

assign select_ln850_1_fu_1887_p3 = ((icmp_ln851_1_fu_1877_p2[0:0] === 1'b1) ? trunc_ln850_1_reg_2962 : add_ln695_1_fu_1882_p2);

assign select_ln850_2_fu_1918_p3 = ((icmp_ln851_2_fu_1908_p2[0:0] === 1'b1) ? trunc_ln850_2_reg_2974 : add_ln695_2_fu_1913_p2);

assign select_ln850_3_fu_1863_p3 = ((p_Result_s_fu_1839_p3[0:0] === 1'b1) ? select_ln850_fu_1856_p3 : trunc_ln_reg_2950);

assign select_ln850_4_fu_1894_p3 = ((p_Result_1_fu_1870_p3[0:0] === 1'b1) ? select_ln850_1_fu_1887_p3 : trunc_ln850_1_reg_2962);

assign select_ln850_5_fu_1925_p3 = ((p_Result_2_fu_1901_p3[0:0] === 1'b1) ? select_ln850_2_fu_1918_p3 : trunc_ln850_2_reg_2974);

assign select_ln850_fu_1856_p3 = ((icmp_ln851_fu_1846_p2[0:0] === 1'b1) ? trunc_ln_reg_2950 : add_ln695_fu_1851_p2);

assign select_ln95_fu_1398_p3 = ((icmp_ln95_fu_1393_p2[0:0] === 1'b1) ? 32'd0 : add_ln95_reg_2493);

assign sext_ln42_fu_587_p1 = $signed(trunc_ln1_fu_577_p4);

assign sext_ln581_fu_804_p1 = sh_amt_reg_2218_pp0_iter8_reg;

assign sext_ln581cast_fu_822_p1 = sext_ln581_fu_804_p1[15:0];

assign sext_ln70_fu_994_p1 = img_width_read_reg_2135;

assign sh_amt_fu_683_p3 = ((icmp_ln581_reg_2211[0:0] === 1'b1) ? add_ln581_fu_673_p2 : sub_ln581_fu_678_p2);

assign shl_ln604_fu_826_p2 = trunc_ln583_reg_2241_pp0_iter8_reg << sext_ln581cast_fu_822_p1;

assign sub_ln581_fu_678_p2 = (12'd7 - F2_reg_2204);

assign tmp_10_i_i_fu_1932_p4 = {{{select_ln850_5_reg_2996}, {select_ln850_4_reg_2991}}, {select_ln850_3_reg_2986}};

assign tmp_12_fu_1612_p4 = {{select_ln75_4_fu_1573_p3[23:16]}};

assign tmp_15_fu_1669_p4 = {{select_ln75_7_fu_1630_p3[23:16]}};

assign tmp_16_fu_1375_p4 = {{select_ln75_8_fu_1336_p3[23:16]}};

assign tmp_19_fu_657_p4 = {{F2_fu_651_p2[11:3]}};

assign tmp_21_fu_807_p3 = gmem3_addr_read_reg_2166_pp0_iter8_reg[32'd31];

assign tmp_s_fu_1507_p4 = {{select_ln75_1_fu_1461_p3[23:16]}};

assign trunc_ln1_fu_577_p4 = {{coefficient_dout[63:2]}};

assign trunc_ln48_fu_937_p1 = img_width_read_reg_2135[30:0];

assign trunc_ln555_fu_617_p1 = ireg_fu_613_p1[62:0];

assign trunc_ln565_fu_639_p1 = ireg_fu_613_p1[51:0];

assign trunc_ln583_fu_729_p1 = select_ln570_fu_722_p3[15:0];

assign trunc_ln586_1_fu_755_p1 = ashr_ln586_fu_750_p2[15:0];

assign trunc_ln586_fu_743_p1 = sh_amt_reg_2218_pp0_iter7_reg[5:0];

assign trunc_ln75_10_fu_1569_p1 = grp_fu_555_p5[23:0];

assign trunc_ln75_11_fu_1580_p1 = select_ln75_4_fu_1573_p3[7:0];

assign trunc_ln75_12_fu_1254_p1 = tmp_5_fu_1246_p5[23:0];

assign trunc_ln75_13_fu_1265_p1 = select_ln75_5_fu_1258_p3[7:0];

assign trunc_ln75_14_fu_1289_p1 = grp_fu_566_p5[23:0];

assign trunc_ln75_15_fu_1300_p1 = select_ln75_6_fu_1293_p3[7:0];

assign trunc_ln75_16_fu_1626_p1 = grp_fu_566_p5[23:0];

assign trunc_ln75_17_fu_1637_p1 = select_ln75_7_fu_1630_p3[7:0];

assign trunc_ln75_18_fu_1332_p1 = tmp_8_fu_1324_p5[23:0];

assign trunc_ln75_19_fu_1343_p1 = select_ln75_8_fu_1336_p3[7:0];

assign trunc_ln75_1_fu_1188_p1 = grp_fu_544_p5[23:0];

assign trunc_ln75_2_fu_1426_p1 = select_ln75_fu_1420_p3[7:0];

assign trunc_ln75_3_fu_1457_p1 = grp_fu_544_p5[23:0];

assign trunc_ln75_4_fu_1468_p1 = select_ln75_1_fu_1461_p3[7:0];

assign trunc_ln75_5_fu_1200_p1 = tmp_2_fu_1192_p5[23:0];

assign trunc_ln75_6_fu_1211_p1 = select_ln75_2_fu_1204_p3[7:0];

assign trunc_ln75_7_fu_1112_p1 = select_ln81_fu_1105_p3[1:0];

assign trunc_ln75_8_fu_1242_p1 = grp_fu_555_p5[23:0];

assign trunc_ln75_9_fu_1545_p1 = select_ln75_3_fu_1539_p3[7:0];

assign trunc_ln75_fu_1013_p1 = ap_phi_mux_top_idx_1_phi_fu_488_p4[1:0];

assign trunc_ln851_1_fu_1821_p1 = add_ln703_15_fu_1777_p2[6:0];

assign trunc_ln851_2_fu_1835_p1 = add_ln703_23_fu_1791_p2[6:0];

assign trunc_ln851_fu_1807_p1 = add_ln703_7_fu_1763_p2[6:0];

assign trunc_ln92_fu_1172_p1 = ap_phi_mux_insert_idx_phi_fu_511_p4[1:0];

assign window_line_idx_fu_1120_p3 = ((icmp_ln87_fu_1116_p2[0:0] === 1'b1) ? top_idx_1_reg_484 : select_ln81_fu_1105_p3);

assign write_stream_din = tmp_10_i_i_fu_1932_p4;

assign xor_ln571_fu_759_p2 = (icmp_ln571_reg_2197_pp0_iter7_reg ^ 1'd1);

assign xor_ln581_fu_852_p2 = (or_ln581_fu_848_p2 ^ 1'd1);

assign xor_ln582_fu_780_p2 = (or_ln582_fu_776_p2 ^ 1'd1);

assign xor_ln585_fu_831_p2 = (icmp_ln585_reg_2247_pp0_iter8_reg ^ 1'd1);

assign zext_ln455_fu_643_p1 = exp_tmp_V_reg_2187;

assign zext_ln569_fu_712_p1 = p_Result_4_fu_705_p3;

assign zext_ln586_fu_746_p1 = trunc_ln586_fu_743_p1;

assign zext_ln72_fu_1140_p1 = $unsigned(j_reg_472);

assign zext_ln75_1_fu_1063_p1 = add_ln74_1_reg_2338;

assign zext_ln75_fu_1041_p1 = add_ln74_reg_2326;

assign zext_ln92_fu_1165_p1 = ap_phi_mux_insert_column_idx_phi_fu_500_p4;

endmodule //convolve_fpga_compute_dataflow_1
